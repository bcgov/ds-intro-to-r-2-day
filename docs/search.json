[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"repository house materials 2 day course introducing participants data science using R.goal 2 day workshop teach new--programming data professionals import data, clean summarize data set, make static data visualizations using program R. R popular statistical computing language, commonly used many scientific disciplines statistical analysis, generating production-quality graphics, automating data workflow tasks. workshop content follow best practices using R data analysis, giving attendees foundation fundamentals R scientific computing.","code":""},{"path":"index.html","id":"daily-schedule","chapter":"Preface","heading":"Daily schedule","text":"","code":""},{"path":"index.html","id":"day-1","chapter":"Preface","heading":"Day 1","text":"Introduction Course (30 min) (Bonnie) Demo (10 min) (Bonnie)Introduction R & RStudio (50 minutes) (Bonnie)BREAK ☕Seeking Help R (15 minutes) (Julie)Project Management RStudio (60 minutes) (Julie)LunchData Structures (75 minutes) (Bonnie)Extra Practice + Questions (15 minutes)BREAK ☕Data Manipulation dplyr (90 minutes) (Julie)Day 1 Wrap-+ Questions (15 minutes)","code":""},{"path":"index.html","id":"day-2","chapter":"Preface","heading":"Day 2","text":"Review + Questions (30 minutes)Making Publication Quality Plots ggplot2 Pt. 1 (60 minutes) (Bonnie)BREAK ☕Making Publication Quality Plots ggplot2 Pt. 2 (60 minutes) (Bonnie)Extra Practice + Questions (15 minutes)LunchData Manipulation tidyr (60 minutes) (Julie)Extra Practice + Questions (15 minutes)BREAK ☕Joining Related Data (45 minutes) (Julie)Mini-Analysis Project (45 minutes)Day 2 Wrap-+ Questions (15 minutes)lesson material sourced Software Carpentry Foundation (now Carpenties) R Reproducible Scientific Analysis lesson material: Thomas Wright Naupaka Zimmerman (eds): Software Carpentry: R \nReproducible Scientific Analysis. Version 2016.06, June 2016,\nhttps://github.com/swcarpentry/r-novice-gapminder,\n10.5281/zenodo.57520.Original Work Copyright © Software Carpentry, content modified Province British Columbia.work licensed Creative Commons Attribution 4.0 International License.\nview copy license, visit http://creativecommons.org/licenses//4.0/..","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-r-and-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1 Introduction to R and RStudio","text":"","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"motivation","chapter":"1 Introduction to R and RStudio","heading":"1.1 Motivation","text":"Science multi-step process: ’ve designed experiment \ncollected data, real fun begins! lesson teach start\nprocess using R RStudio. begin raw data, perform\nexploratory analyses, learn plot results graphically. course\nstarts dataset gapminder.org containing\npopulation information many countries time. also access open\ndata B.C. Data Catalogue.Can read data R?Can plot population Senegal?Can calculate average income countries continent Asia?Can read data B.C. Data Catalogue R?end lessons able things like plot \npopulations countries minute!","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"before-starting-the-workshop","chapter":"1 Introduction to R and RStudio","heading":"1.2 Before Starting The Workshop","text":"Please ensure latest version R RStudio installed \nmachine. important, packages used workshop may \ninstall correctly () R date.administrative rights computer:Download R RStudio BC Government Software Centre:Install RTools (Rtools 4.0 Gen PO) - install RStudioInstall R (RforWindowsX64 4.0.5 Gen P0)administrative rights computer: Download install latest version R hereDownload install RStudio hereThere one bit customization need make R play nicely \nbcgov computer:Open command prompt (Open Start Menu type cmd press Enter). Make sure command prompt opens C directory e.g. C:\\>. opens another directory can change typing C:.Type following line command prompt window exactly shown:Press Enter, see SUCCESS: Specified value saved.\nQuit command prompt typing exit pressing Enter","code":"setx HOME \"%USERPROFILE%\""},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1.3 Introduction to RStudio","text":"Throughout lesson, ’re going teach fundamentals \nR language well best practices organizing code \nscientific projects make life easier.’ll using RStudio: free, open source R integrated development\nenvironment. provides built editor, works platforms (including\nservers) provides many advantages integration version\ncontrol project management.Tip: Key RStudio SettingBy default RStudio automatically save session variables \nporject directory file called .RData. saved exit \nproject restored open . highly recommend turning\nfeature . learn course, outputs created\ncode. Typically need save intermediate steps. don’t\nplan use feature can toggle Project Options -> General\ntab.Basic layoutWhen first open RStudio, greeted three panels:interactive R console (entire left)Environment/History (tabbed upper right)Files/Plots/Packages/Help/Viewer (tabbed lower right)RStudio layoutOnce open files, R scripts, editor panel also open\ntop left.RStudio layout .R file open","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"work-flow-within-rstudio","chapter":"1 Introduction to R and RStudio","heading":"1.4 Work flow within RStudio","text":"two main ways one can work within RStudio.Test play within interactive R console copy code \n.R file run later.\nworks well small tests initially starting .\nquickly becomes laborious\nworks well small tests initially starting .quickly becomes laboriousStart writing .R file use RStudio’s short cut keys Run command\npush current line, selected lines modified lines \ninteractive R console.\ngreat way start; code saved later\nable run file create within RStudio\nusing R’s source() function.\ngreat way start; code saved laterYou able run file create within RStudio\nusing R’s source() function.Tip: Running segments codeRStudio offers great flexibility running code within editor\nwindow. buttons, menu choices, keyboard shortcuts. run \ncurrent line, can\n1. click Run button editor panel, \n2. select “Run Lines” “Code” menu, \n3. hit Ctrl+Return Windows Linux\n⌘+Return OS X.\n(shortcut can also seen hovering\nmouse button). run block code, select Run.\nmodified line code within block code just run,\nneed reselect section Run, can use next button\nalong, Re-run previous region. run previous code block\nincluding modifications made.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-r","chapter":"1 Introduction to R and RStudio","heading":"1.5 Introduction to R","text":"Much time R spent R interactive console. \ncan run code line--line, can useful environment try \nideas adding R script file. console RStudio \none get typed R command-line\nenvironment.\nfirst thing see R interactive session bunch \ninformation, followed “>” blinking cursor. operates “Read,\nevaluate, print loop”: type commands, R tries execute , \nreturns result.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"before-we-dive-in","chapter":"1 Introduction to R and RStudio","heading":"1.5.1 Before we dive in…","text":"first going set workspace, called RStudio Project, can work \ncourse materials save work.\nconsole, type:Windows:Mac:… press Enter.create new R project folder user directory (C:/Users/[your_user_name]/intro-r-Feb2022/ Windows,\n/Users/[your_user_name]/intro-r-Feb2022/ Mac), open project RStudio.","code":"\ninstall.packages(\"usethis\")\nusethis::use_course(\"https://github.com/bcgov/ds-intro-to-r-2-day/raw/master/intro-r-Feb2022.zip\", destdir = Sys.getenv(\"USERPROFILE\"))\nusethis::use_course(\"https://github.com/bcgov/ds-intro-to-r-2-day/raw/master/intro-r-Feb2022.zip\", destdir = Sys.getenv(\"HOME\"))"},{"path":"introduction-to-r-and-rstudio.html","id":"using-r-as-a-calculator","chapter":"1 Introduction to R and RStudio","heading":"1.6 Using R as a calculator","text":"simplest thing R arithmetic:R print answer, preceding “[1]”. Don’t worry \nnow, ’ll explain later. now think indicating output.type incomplete command, R wait \ncomplete :time hit return R session shows “+” instead “>”, \nmeans ’s waiting complete command. want cancel\ncommand can simply hit “Esc” RStudio give back “>”\nprompt.Tip: Cancelling commandsCancelling command isn’t useful killing incomplete commands:\ncan also use tell R stop running code (example ’s\ntaking much longer expect), get rid code ’re\ncurrently writing.using R calculator, order operations \nlearned back school.highest lowest precedence:Parentheses: (, )Exponents: ^ **Divide: /Multiply: *Add: +Subtract: -Use parentheses group operations order force order \nevaluation differs default, make clear \nintend.can get unwieldy needed, clarifies intentions.\nRemember others may later read code.text line code called \n“comment”. Anything follows hash (octothorpe) symbol\n# ignored R executes code.Really small large numbers get scientific notation:shorthand “multiplied 10^XX”. 2e-4\nshorthand 2 * 10^(-4).can write numbers scientific notation :","code":"\n1 + 100[1] 101> 1 ++\n3 + 5 * 2[1] 13\n(3 + 5) * 2[1] 16\n(3 + (5 * (2 ^ 2))) # hard to read\n3 + 5 * 2 ^ 2       # clear, if you remember the rules\n3 + 5 * (2 ^ 2)     # if you forget some rules, this might help\n2/10000[1] 2e-04\n5e3  # Note the lack of minus here[1] 5000"},{"path":"introduction-to-r-and-rstudio.html","id":"mathematical-functions","chapter":"1 Introduction to R and RStudio","heading":"1.7 Mathematical functions","text":"R many built mathematical functions. call function,\nsimply type name, followed open closing parentheses.\nAnything type inside parentheses called function’s\narguments:Don’t worry trying remember every function R. \ncan simply look Google, can remember \nstart function’s name, use tab completion RStudio.one advantage RStudio R , \nauto-completion abilities allow easily\nlook functions, arguments, values \ntake.Typing ? name command open help page\ncommand. well providing detailed description \ncommand works, scrolling bottom \nhelp page usually show collection code examples \nillustrate command usage. ’ll go example later.","code":"\nsum(1, 2, 3, 4, 5)[1] 15\nsin(1)  # trigonometry functions[1] 0.841471\nlog(1)  # natural logarithm[1] 0\nlog10(10) # base-10 logarithm[1] 1\nexp(0.5) # e^(1/2)[1] 1.648721"},{"path":"introduction-to-r-and-rstudio.html","id":"comparing-things","chapter":"1 Introduction to R and RStudio","heading":"1.8 Comparing things","text":"can also comparison R:Tip: Comparing NumbersA word warning comparing numbers: \nnever use == compare two numbers unless \nintegers (data type can specifically represent\nwhole numbers).Computers may represent decimal numbers \ncertain degree precision, two numbers look\nprinted R, may actually \ndifferent underlying representations therefore \ndifferent small margin error (called Machine\nnumeric tolerance).Instead use .equal() function.reading: http://floating-point-gui.de/","code":"\n1 == 1  # equality (note two equals signs, read as \"is equal to\")[1] TRUE\n1 != 2  # inequality (read as \"is not equal to\")[1] TRUE\n1 < 2  # less than[1] TRUE\n1 <= 1  # less than or equal to[1] TRUE\n1 > 0  # greater than[1] TRUE\n1 >= -9 # greater than or equal to[1] TRUE"},{"path":"introduction-to-r-and-rstudio.html","id":"variables-and-assignment","chapter":"1 Introduction to R and RStudio","heading":"1.9 Variables and assignment","text":"can store values variables using assignment operator <-, like :Notice assignment print value. Instead, stored later\nsomething called variable. x now contains value 5:precisely, stored value decimal approximation \nfraction called floating point number.Look Environment tab one panes RStudio, see x value\nappeared. variable x can used place number calculation expects number:Notice also variables can reassigned:x used contain value 5 now value 100.Assignment values can contain variable assigned :right hand side assignment can valid R expression.\nright hand side fully evaluated assignment occurs.Variable names can contain letters, numbers, underscores periods. \nstart number contain spaces . Different people use\ndifferent conventions long variable names, includeperiods..wordsunderscores_between_wordscamelCaseToSeparateWordsWhat use , consistent.also possible use = operator assignment:much less common among R users. important thing \nconsistent operator use. occasionally places\nless confusing use <- =, common\nsymbol used community. recommendation use <-.","code":"\nx <- 5\nx[1] 5\nlog(x)[1] 1.609438\nx <- 100\nx <- x + 1 #notice how RStudio updates its description of x on the top right tab\ny <- x * 2\nx = 1/40"},{"path":"introduction-to-r-and-rstudio.html","id":"challenge-1-5-minutes","chapter":"1 Introduction to R and RStudio","heading":"1.9.1 Challenge 1 (5 minutes)","text":"following valid R variable names?following can used R variables:following creates hidden variable:following able used create variable","code":"min_height\nmax.height\n_age\n.mass\nMaxLength\nmin-length\n2widths\ncelsius2kelvin\nmin_height\nmax.height\nMaxLength\ncelsius2kelvin\n.mass_age\nmin-length\n2widths"},{"path":"introduction-to-r-and-rstudio.html","id":"challenge-2-5-minutes","chapter":"1 Introduction to R and RStudio","heading":"1.9.2 Challenge 2 (5 minutes)","text":"value variable \nstatement following program?give value 47.5 variable massThis give value 122 variable ageThis multiply existing value 47.5 2.3 give new value \n109.25 variable mass.subtract 20 existing value 122 give new value\n102 variable age.","code":"\nmass <- 47.5\nage <- 122\nmass <- mass * 2.3\nage <- age - 20\nmass <- 47.5\nage <- 122\nmass <- mass * 2.3\nage <- age - 20"},{"path":"introduction-to-r-and-rstudio.html","id":"challenge-3-5-minutes","chapter":"1 Introduction to R and RStudio","heading":"1.9.3 Challenge 3 (5 minutes)","text":"Run code previous challenge, write command \ncompare mass age. mass larger age?One way answering question R use > set following:`yield boolean value TRUE since 109.25 greater 102.","code":"\nmass > age[1] TRUE"},{"path":"introduction-to-r-and-rstudio.html","id":"vectorization","chapter":"1 Introduction to R and RStudio","heading":"1.10 Vectorization","text":"One final thing aware R vectorized, meaning \nvariables functions can vectors values. contrast physics \nmathematics, vector R describes set values certain order \ndata type. exampleThis incredibly powerful; discuss \nupcoming lesson.","code":"\n1:5[1] 1 2 3 4 5\n2 * (1:5)[1]  2  4  6  8 10\nx <- 1:5\n2 * x[1]  2  4  6  8 10\ny <- c(1, 3, 5, 7, 9)\ny[1] 1 3 5 7 9"},{"path":"introduction-to-r-and-rstudio.html","id":"managing-your-environment","chapter":"1 Introduction to R and RStudio","heading":"1.11 Managing your environment","text":"useful commands can use interact R session.ls list variables functions stored global environment\n(working R session):Tip: hidden objectsLike shell, ls hide variables functions starting\n“.” default. list objects, type ls(.names=TRUE)\ninsteadNote didn’t give arguments ls, still\nneeded give parentheses tell R call function.type ls , R print source code function!can use rm delete objects longer need:lots things environment want delete ,\ncan pass results ls rm function:Tip: Warnings vs. ErrorsPay attention R something unexpected! Errors, like ,\nthrown R proceed calculation. Warnings \nhand usually mean function run, probably\nhasn’t worked expected.cases, message R prints usually give clues\nfix problem.","code":"\nls()[1] \"age\"            \"fix_fig_path\"   \"knitr_fig_path\" \"mass\"          \n[5] \"x\"              \"y\"             \nlsfunction (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, \n    pattern, sorted = TRUE) \n{\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n<bytecode: 0x7fba0bd29680>\n<environment: namespace:base>\nrm(x)\nrm(list = ls())"},{"path":"introduction-to-r-and-rstudio.html","id":"challenge-4-2-minutes","chapter":"1 Introduction to R and RStudio","heading":"1.11.1 Challenge 4 (2 minutes)","text":"Clean working environment deleting mass age\nvariables.can use rm command accomplish task","code":"\nrm(age, mass)"},{"path":"introduction-to-r-and-rstudio.html","id":"r-packages","chapter":"1 Introduction to R and RStudio","heading":"1.12 R Packages","text":"Think packages like apps smart phone. phone can lot \nthings right box, can get apps make existing\nfunctionality better (like better timer), allow new amazing\nthings phone (like play Cwazy Cupcakes).Similarly, R comes many functions built , possible add\nfunctions R obtaining package written someone else. \nwriting, 10,000 packages available CRAN (comprehensive R\narchive network).R RStudio functionality managing packages:can see packages installed typing\ninstalled.packages()can install packages typing install.packages(\"packagename\"),\npackagename package name, quotes.can update installed packages typing update.packages()can remove package remove.packages(\"packagename\")can make package available use library(packagename)","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"challenge-5-2-minutes","chapter":"1 Introduction to R and RStudio","heading":"1.12.1 Challenge 5 (2 minutes)","text":"Install following packages: ggplot2, dplyr.can use install.packages() command install required packages.","code":"\ninstall.packages(\"ggplot2\")\ninstall.packages(\"dplyr\")"},{"path":"seeking-help-in-r.html","id":"seeking-help-in-r","chapter":"2 Seeking Help in R","heading":"2 Seeking Help in R","text":"","code":""},{"path":"seeking-help-in-r.html","id":"reading-help-files","chapter":"2 Seeking Help in R","heading":"2.1 Reading help files","text":"R, every package, provides help files functions. general syntax search help \nfunction, “function_name”, specific function package loaded \nnamespace (interactive R session):load help page RStudio (plain text R ).help page broken sections:Description: extended description function .Usage: arguments function default values.Arguments: explanation data argument expecting.Details: important details aware .Value: type data function returns.See Also: related functions might find useful.Examples: examples use function.Different functions might different sections, main ones aware .Tip: Running examplesFrom within function help page, can highlight code \nExamples hit Ctrl+Return run \nRStudio console. gives quick way get feel \nfunction works.Tip: Reading help filesOne daunting aspects R large number functions\navailable. prohibitive, impossible, remember \ncorrect usage every function use. Luckily, help files\nmean don’t !","code":"\n?function_name\nhelp(function_name)"},{"path":"seeking-help-in-r.html","id":"special-operators","chapter":"2 Seeking Help in R","heading":"2.2 Special operators","text":"seek help special operators, use quotes:","code":"\n?\"<-\""},{"path":"seeking-help-in-r.html","id":"getting-help-on-packages","chapter":"2 Seeking Help in R","heading":"2.3 Getting help on packages","text":"Many packages come “vignettes”: tutorials extended example documentation.\nWithout arguments, vignette() list vignettes installed packages;\nvignette(package=\"package-name\") list available vignettes \npackage-name, vignette(\"vignette-name\") open specified vignette.package doesn’t vignettes, can usually find help typing\nhelp(\"package-name\").Many packages also web presence. Google friend . example, package website ggplot2 package: https://ggplot2.tidyverse.org/.","code":""},{"path":"seeking-help-in-r.html","id":"finding-help-for-functions-in-packages","chapter":"2 Seeking Help in R","heading":"2.4 Finding help for functions in packages","text":"looking help function within package, several ways find :loaded package (via library(pkg_name)) know package name, can simply use ?function_nameIf haven’t loaded package, can use following syntax: ?package_name::function_name help(\"function_name\", package = \"package_name\")Often easiest way load function index package help(package = \"package_name\") click link function seeking help","code":""},{"path":"seeking-help-in-r.html","id":"when-you-kind-of-remember-the-function","chapter":"2 Seeking Help in R","heading":"2.5 When you kind of remember the function","text":"’re sure package function ’s specifically spelled, can fuzzy search:","code":"\n??function_name"},{"path":"seeking-help-in-r.html","id":"when-you-have-no-idea-where-to-begin","chapter":"2 Seeking Help in R","heading":"2.6 When you have no idea where to begin","text":"don’t know function package need use,\nCRAN Task Views\nspecially maintained list packages grouped \nfields. can good starting point.","code":""},{"path":"seeking-help-in-r.html","id":"challenges-10-minutes","chapter":"2 Seeking Help in R","heading":"2.7 Challenges (10 minutes)","text":"","code":""},{"path":"seeking-help-in-r.html","id":"challenge-1","chapter":"2 Seeking Help in R","heading":"2.7.1 Challenge 1","text":"Look help sum() function. two ways can pass numbers\nfunction added together?","code":"\n?sum\nsum(1, 2, 3, 4, 5)\nx <- c(1, 2, 3)\nsum(x)"},{"path":"seeking-help-in-r.html","id":"challenge-2","chapter":"2 Seeking Help in R","heading":"2.7.2 Challenge 2","text":"Look help paste() function. ’ll need use later.\ndifference sep collapse arguments?look help paste() function, use:difference sep collapse little\ntricky. paste function accepts number arguments, \ncan vector length. sep argument specifies string\nused concatenated terms — default, space. result \nvector long longest argument supplied paste. contrast,\ncollapse specifies concatenation elements collapsed\ntogether using given separator, result single string.\ne.g. (information,\nscroll bottom ?paste help page look \nexamples, try example('paste').)","code":"\nhelp(\"paste\")\n?paste\npaste(c(\"a\",\"b\"), \"c\")[1] \"a c\" \"b c\"\npaste(c(\"a\",\"b\"), \"c\", sep = \",\")[1] \"a,c\" \"b,c\"\npaste(c(\"a\",\"b\"), \"c\", collapse = \"|\")[1] \"a c|b c\"\npaste(c(\"a\",\"b\"), \"c\", sep = \",\", collapse = \"|\")[1] \"a,c|b,c\""},{"path":"seeking-help-in-r.html","id":"challenge-3","chapter":"2 Seeking Help in R","heading":"2.7.3 Challenge 3","text":"Use help find function (associated parameters) \nuse load data csv file columns delimited “\n(tab) decimal point ”.” (period). check decimal\nseparator important, especially working international\ncolleagues, different countries different conventions \ndecimal point (.e. comma vs period).\nhint: use ??csv lookup csv related functions.standard R function reading tab-delimited files period\ndecimal separator read.delim(). can also \nread.table(file, sep=\"\\t\") (period default decimal\nseparator read.table(), although may change\ncomment.char argument well data file contains\nhash (#) characters.","code":""},{"path":"seeking-help-in-r.html","id":"challenge-4","chapter":"2 Seeking Help in R","heading":"2.7.4 Challenge 4","text":"Find help mutate function dplyr package. purpose? notice different help page?mutate() adds new variables preserves existing ones.\nhelp page mutate also documents function transmute().","code":"\n?dplyr::mutate\n# OR\nlibrary(dplyr)\n?mutate\n# OR\nhelp(\"mutate\", package = \"dplyr\")\n# OR\nhelp(package = \"dplyr\") # and click on the 'mutate' link"},{"path":"project-management-with-rstudio.html","id":"project-management-with-rstudio","chapter":"3 Project Management With RStudio","heading":"3 Project Management With RStudio","text":"","code":""},{"path":"project-management-with-rstudio.html","id":"introduction","chapter":"3 Project Management With RStudio","heading":"3.1 Introduction","text":"scientific process naturally incremental, many projects\nstart life random notes, code, manuscript, \neventually everything bit mixed together.\nManaging projects reproducible fashion doesn’t just make science reproducible, makes life easier.\npeople tend organize projects like :many reasons ALWAYS avoid :really hard tell version data \noriginal modified;gets really messy mixes files various\nextensions together;probably takes lot time actually find\nthings, relate correct figures exact code\nused generate ;good project layout ultimately make life easier:help ensure integrity data;makes simpler share code someone else\n(lab-mate, collaborator, supervisor);allows easily upload code manuscript submission;makes easier pick project back break.","code":""},{"path":"project-management-with-rstudio.html","id":"a-possible-solution","chapter":"3 Project Management With RStudio","heading":"3.2 A possible solution","text":"Fortunately, tools packages can help manage work effectively.One powerful useful aspects RStudio project management\nfunctionality. ’ll using today create self-contained, reproducible\nproject.","code":""},{"path":"project-management-with-rstudio.html","id":"creating-a-self-contained-project","chapter":"3 Project Management With RStudio","heading":"3.3 Creating a self-contained project","text":"initial breakout sessions, downloaded opened new RStudio\nProject called intro-r-Feb2022, running following code:Windows:Mac:created new R project folder user directory (C:/Users/[your_user_name]/intro-r-Feb2022/ Windows,\n/Users/[your_user_name]/intro-r-Feb2022/ Mac).Inside project collection .R .Rmd files,\ndata/ folder, README.md file.Now whenever open project RStudio, work project \nentirely self-contained directory.","code":"\nuse_course(\"https://github.com/bcgov/ds-intro-to-r-2-day/raw/master/intro-r-Feb2022.zip\", destdir = Sys.getenv(\"USERPROFILE\"))\nuse_course(\"https://github.com/bcgov/ds-intro-to-r-2-day/raw/master/intro-r-Feb2022.zip\", destdir = Sys.getenv(\"HOME\"))"},{"path":"project-management-with-rstudio.html","id":"challenge-1-5-minutes-1","chapter":"3 Project Management With RStudio","heading":"3.3.1 Challenge 1 (5 minutes)","text":"get used navigating Projects RStudio, close Project reopen .\nleast three ways opening RStudio project - try find two!","code":""},{"path":"project-management-with-rstudio.html","id":"best-practices-for-project-organization","chapter":"3 Project Management With RStudio","heading":"3.4 Best practices for project organization","text":"Although “best” way lay project, general\nprinciples adhere make project management easier:","code":""},{"path":"project-management-with-rstudio.html","id":"treat-data-as-read-only","chapter":"3 Project Management With RStudio","heading":"3.4.1 Treat data as read only","text":"probably important goal setting project. Data \ntypically time consuming /expensive collect. Working \ninteractively (e.g., Excel) can modified means never\nsure data came , modified since collection.\ntherefore good idea treat data “read-”.","code":""},{"path":"project-management-with-rstudio.html","id":"data-cleaning","chapter":"3 Project Management With RStudio","heading":"3.4.2 Data Cleaning","text":"many cases data “dirty”: need significant pre-processing\nget format R (programming language) find useful.\ntask sometimes called “data munging”. Storing scripts \nseparate folder, creating second “read-” data folder hold \n“cleaned” data sets can prevent confusion two sets.","code":""},{"path":"project-management-with-rstudio.html","id":"treat-generated-output-as-disposable","chapter":"3 Project Management With RStudio","heading":"3.4.3 Treat generated output as disposable","text":"Anything generated scripts treated disposable: \nable regenerated scripts.lots different ways manage output. output folder\ndifferent sub-directories separate analysis makes easier later.\nSince many analyses exploratory don’t end used final\nproject, analyses get shared projects.Tip: Good Enough Practices Scientific ComputingGood Enough Practices Scientific Computing gives following recommendations project organization:Put project directory, named project.Put text documents associated project doc directory.Put raw data metadata data directory, files generated cleanup analysis results, outputs directory.Put source project’s scripts programs src directory, programs brought elsewhere compiled locally bin directory.Name files reflect content function.","code":""},{"path":"project-management-with-rstudio.html","id":"separate-function-definition-and-application","chapter":"3 Project Management With RStudio","heading":"3.4.4 Separate function definition and application","text":"One effective ways work R start writing code want run directly .R script, running selected lines (either using keyboard shortcuts RStudio clicking “Run” button) interactive R console.project early stages, initial .R script file usually contains many lines\ndirectly executed code. matures, reusable chunks get pulled \nfunctions. ’s good idea separate code two separate folders; one\nstore useful functions ’ll reuse across analyses projects, \none store analysis scripts.","code":""},{"path":"project-management-with-rstudio.html","id":"version-control","chapter":"3 Project Management With RStudio","heading":"3.4.5 Version Control","text":"important use version control projects. Go good lesson describes using Git RStudio.","code":""},{"path":"data-structures.html","id":"data-structures","chapter":"4 Data Structures","heading":"4 Data Structures","text":"One R’s powerful features ability deal tabular data -\nmay already spreadsheet CSV file. Let’s start \nlooking toy dataset data/ directory, called feline-data.csv:contents new file, feline-data.csv:","code":"coat,weight,likes_string\ncalico,2.1,1\nblack,5.0,0\ntabby,3.2,1"},{"path":"data-structures.html","id":"the-readr-package","chapter":"4 Data Structures","heading":"4.1 The readr package","text":"read data R, going use first package, called readr.\nreadr part suite packages called “tidyverse” designed\nwork nicely together ease many common data operations.first time use package, need install (like installing\napp phone app store). Additionally, good idea \nperiodically check updates package:Every time want use package, must load R session, \nusing library function:Now can load data R via following using read_csv() function,\nassign object called cats:read_csv function used reading tabular data stored text\nfile columns data separated punctuation characters \nCSV files (csv = comma-separated values). base version called\nread.csv, readr version (read_csv) bit user-friendly, \nuses sensible defaults. Tabs commas common\npunctuation characters used separate delimit data points text files.object created read_csv called “data.frame” - rectangular\ntable-like object rows columns. readr creates special type data.frame called \"tibble\".can begin exploring dataset right away, first looking whole thing:pulling individual columns specifying using $ operator:can operations columns:aboutUnderstanding happened key successfully analyzing data R.","code":"\ninstall.packages(\"readr\")\nlibrary(readr)\ncats <- read_csv(file = \"data/feline-data.csv\")Rows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): coat\ndbl (2): weight, likes_string\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ncats# A tibble: 3 × 3\n  coat   weight likes_string\n  <chr>   <dbl>        <dbl>\n1 calico    2.1            1\n2 black     5              0\n3 tabby     3.2            1\ncats# A tibble: 3 × 3\n  coat   weight likes_string\n  <chr>   <dbl>        <dbl>\n1 calico    2.1            1\n2 black     5              0\n3 tabby     3.2            1\ncats$weight[1] 2.1 5.0 3.2\ncats$coat[1] \"calico\" \"black\"  \"tabby\" \n## Say we discovered that the scale weighs 500g light:\ncats$weight + 0.5[1] 2.6 5.5 3.7\n# We can save this new value back in the `weight` column:\ncats$weight <- cats$weight + 0.5\npaste(\"My\", cats$coat, \"cat weighs\", cats$weight, \"kilograms\")[1] \"My calico cat weighs 2.6 kilograms\" \"My black cat weighs 5.5 kilograms\" \n[3] \"My tabby cat weighs 3.7 kilograms\" \ncats$weight + cats$coatError in cats$weight + cats$coat: non-numeric argument to binary operator"},{"path":"data-structures.html","id":"data-types","chapter":"4 Data Structures","heading":"4.2 Data Types","text":"guessed last command return error 2.1 plus\n\"black\" nonsense, ’re right - already intuition \nimportant concept programming called data types. can ask type \ndata something :4 main types:double/numeric (decimal numbers),integer (counting numbers),logical (TRUE/FALSE),character (free text)matter \ncomplicated analyses become, data R interpreted one \nbasic data types. strictness really important consequences.table R loaded cats data something called \ndata.frame, first example something called data\nstructure - , structure R knows build basic\ndata types.can see data.frame calling class function :","code":"\ntypeof(cats$weight)[1] \"double\"\ntypeof(3.14)[1] \"double\"\ntypeof(1L) # The L suffix forces the number to be an integer, since by default R uses double (decimal) numbers[1] \"integer\"\ntypeof(TRUE)[1] \"logical\"\ntypeof('banana')[1] \"character\"\nclass(cats)[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" "},{"path":"data-structures.html","id":"vectors-and-type-coercion","chapter":"4 Data Structures","heading":"4.3 Vectors and Type Coercion","text":"better understand behavior, let’s meet another data structures:\nvector.creating vectors , normally use c (combine)\nfunction:vector R essentially ordered list things, special\ncondition everything vector must basic data type.\nNote different spreadsheet programs can store\ndifferent data types table column.command indicates basic data type found vector - case numeric.can use logical operators learned earlier vectors:Vectors can data type ’ve already learned . Let’s make \ncharacter vector:similarly dowe see cats$weight vector, - columns data load R\ndata.frames vectors (length), ’s root R forces everything \ncolumn basic data type.","code":"\nmy_vector <- c(1, 3, 5 ,7 ,9)\nmy_vector[1] 1 3 5 7 9\nclass(my_vector)[1] \"numeric\"\nmy_vector > 4[1] FALSE FALSE  TRUE  TRUE  TRUE\nhogwarts_students <- c(\"Harry\", \"Ron\", \"Hermione\", \"Ginny\")\nhogwarts_students[1] \"Harry\"    \"Ron\"      \"Hermione\" \"Ginny\"   \nclass(hogwarts_students)[1] \"character\"\nhogwarts_students == \"Harry\"[1]  TRUE FALSE FALSE FALSE\nclass(cats$weight)[1] \"numeric\""},{"path":"data-structures.html","id":"discussion-1","chapter":"4 Data Structures","heading":"4.3.1 Discussion 1","text":"R opinionated put columns data?\nhelp us?keeping everything column , allow make simple\nassumptions data; can interpret one entry column \nnumber, can interpret numbers, don’t \ncheck every time. consistency people mean talk \nclean data; long run, strict consistency goes long way making\nlives easier R.Given ’ve learned far, think following produce?something called type coercion, source many surprises\nreason need aware basic data types R \ninterpret . R encounters mix types (numeric character) \ncombined single vector, force \ntype. Consider:coercion rules go: logical -> integer -> double/numeric -> complex ->\ncharacter, -> can read transformed . can try \nforce coercion flow using . functions:can see, surprising things can happen R forces one basic data\ntype another! Nitty-gritty type coercion aside, point : \ndata doesn’t look like thought going look like, type coercion\nmay well blame; make sure everything type vectors \ncolumns data.frames, get nasty surprises!coercion can also useful! example, cats data\nlikes_string numeric, know 1s 0s actually represent\nTRUE FALSE (common way representing ). really use \nlogical data type , two states: TRUE FALSE, \nexactly data represents. can ‘coerce’ column logical \nusing .logical function:","code":"\nquiz_vector <- c(2, 6, \"3\")\ncoercion_vector <- c('a', TRUE)\ncoercion_vector[1] \"a\"    \"TRUE\"\nanother_coercion_vector <- c(0, TRUE)\nanother_coercion_vector[1] 0 1\ncharacter_vector_example <- c('0','2','4')\ncharacter_vector_example[1] \"0\" \"2\" \"4\"\ncharacter_coerced_to_numeric <- as.numeric(character_vector_example)\ncharacter_coerced_to_numeric[1] 0 2 4\nnumeric_coerced_to_logical <- as.logical(character_coerced_to_numeric)\nnumeric_coerced_to_logical[1] FALSE  TRUE  TRUE\ncats$likes_string[1] 1 0 1\ncats$likes_string <- as.logical(cats$likes_string)\ncats$likes_string[1]  TRUE FALSE  TRUE"},{"path":"data-structures.html","id":"data-frames","chapter":"4 Data Structures","heading":"4.4 Data Frames","text":"said columns data.frames vectors:make sense. ","code":"\nstr(cats$weight) num [1:3] 2.6 5.5 3.7\nstr(cats$likes_string) logi [1:3] TRUE FALSE TRUE\nstr(cats$coat) chr [1:3] \"calico\" \"black\" \"tabby\""},{"path":"data-structures.html","id":"missing-values","chapter":"4 Data Structures","heading":"4.5 Missing values","text":"real data analysis, often case missing data \ndata set. example, say want add tail length dataset, one \ncats wouldn’t hold still long enough measured… know \ntail (can’t record 0), don’t know . also\ncan’t record using word code (character; \"missing\") \nvectors R type, weight numeric. common\npractice use placeholder value 9999, can cause\nproblems neglect deal properly, ’s recommended. R \nspecial placeholder missing values called NA - looks lot like \ncharacter value, - special value type \nvector found.","code":"\ncats$tail_length <- c(27.5, NA, 31)\ncats# A tibble: 3 × 4\n  coat   weight likes_string tail_length\n  <chr>   <dbl> <lgl>              <dbl>\n1 calico    2.6 TRUE                27.5\n2 black     5.5 FALSE               NA  \n3 tabby     3.7 TRUE                31  "},{"path":"data-structures.html","id":"challenge-1-5-minutes-2","chapter":"4 Data Structures","heading":"4.5.1 Challenge 1 (5 minutes)","text":"average tail length cats? (Hint, use mean function)run issues? Can help file mean guide ?Use na.rm argument:","code":"\nmean(cats$tail_length)\nmean(cats$tail_length, na.rm = TRUE)"},{"path":"data-structures.html","id":"factors","chapter":"4 Data Structures","heading":"4.6 Factors","text":"Another important data structure called factor. Factors usually look like\ncharacter data, typically used represent categorical information \ndefined set values. \nexample, let’s make vector strings labelling cat colorations \ncats study:can turn vector factor like :Now R noticed three possible categories data - \nalso something surprising; instead printing strings gave ,\ngot bunch numbers instead. R replaced human-readable categories\nnumbered indices hood, necessary many statistical\ncalculations use numerical representations categorical data:","code":"\ncoats <- c('tabby', 'tortoiseshell', 'tortoiseshell', 'black', 'tabby')\ncoats[1] \"tabby\"         \"tortoiseshell\" \"tortoiseshell\" \"black\"        \n[5] \"tabby\"        \nCATegories <- factor(coats)\nclass(CATegories)[1] \"factor\"\nCATegories[1] tabby         tortoiseshell tortoiseshell black         tabby        \nLevels: black tabby tortoiseshell\ntypeof(coats)[1] \"character\"\ntypeof(CATegories)[1] \"integer\""},{"path":"data-structures.html","id":"challenge-2-10-minutes","chapter":"4 Data Structures","heading":"4.6.1 Challenge 2 (10 minutes)","text":"Look help ?read_csv figure control data type\ncolumn read . write command coat read \nfactor, likes_string read logicalUse col_types argument:modeling functions, ’s important know baseline levels . \nassumed first factor, default factors labeled \nalphabetical order. can change specifying levels:case, ’ve explicitly told R “control” represented 1, \n“case” 2. designation can important interpreting \nresults statistical models!","code":"\ncats <- read_csv(file=\"data/feline-data.csv\", col_types = \"fnl\")\nclass(cats$coat)\nclass(cats$likes_string)\ncats <- read_csv(file=\"data/feline-data.csv\", \n                 col_types = cols(coat = col_factor(), likes_string = col_logical()))\nclass(cats$coat)\nclass(cats$likes_string)\nmydata <- c(\"case\", \"control\", \"control\", \"case\")\nfactor_ordering_example <- factor(mydata, levels = c(\"control\", \"case\"))\nstr(factor_ordering_example) Factor w/ 2 levels \"control\",\"case\": 2 1 1 2"},{"path":"data-structures.html","id":"lists","chapter":"4 Data Structures","heading":"4.7 Lists","text":"Another data structure ’ll want bag tricks list. list\nsimpler ways types, can put anything \nwant :can now understand something bit surprising data.frame; happens run:see data.frames look like lists ‘hood’ - \ndata.frame really list vectors, - \norder hold columns mix vectors, \ndata.frame needs something bit flexible vector put \ncolumns together familiar table. words, data.frame \nspecial list vectors must length.cats example, character, double logical variable. \nseen already, column data.frame vector.row observation different variables, data.frame, \nthus can composed elements different types.","code":"\nlist_example <- list(1, \"a\", TRUE, 1+4i)\nlist_example[[1]]\n[1] 1\n\n[[2]]\n[1] \"a\"\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 1+4i\nanother_list <- list(title = \"Numbers\", numbers = 1:10, data = TRUE )\nanother_list$title\n[1] \"Numbers\"\n\n$numbers\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$data\n[1] TRUE\ntypeof(cats)[1] \"list\"\ncats$coat[1] \"calico\" \"black\"  \"tabby\" \ncats[,1]# A tibble: 3 × 1\n  coat  \n  <chr> \n1 calico\n2 black \n3 tabby \ntypeof(cats[,1])[1] \"list\"\nstr(cats[,1])tibble [3 × 1] (S3: tbl_df/tbl/data.frame)\n $ coat: chr [1:3] \"calico\" \"black\" \"tabby\"\ncats[1,]# A tibble: 1 × 4\n  coat   weight likes_string tail_length\n  <chr>   <dbl> <lgl>              <dbl>\n1 calico    2.6 TRUE                27.5\ntypeof(cats[1,])[1] \"list\"\nstr(cats[1,])tibble [1 × 4] (S3: tbl_df/tbl/data.frame)\n $ coat        : chr \"calico\"\n $ weight      : num 2.6\n $ likes_string: logi TRUE\n $ tail_length : num 27.5"},{"path":"data-structures.html","id":"challenge-3-1","chapter":"4 Data Structures","heading":"4.7.1 Challenge 3","text":"several subtly different ways call variables, observations \nelements data.frames:cats[1]cats[[1]]cats$coatcats[\"coat\"]cats[1, 1]cats[, 1]cats[1, ]Try examples explain returned one.Hint: Use function typeof() examine returned case.can think data frame list vectors. single brace [1]\nturns first slice list, another list. case \nrst column data frame.double brace [[1]] returns contents list item. case\ncontents first column, vector type factor.example uses $ character address items name. coat \nrst column data frame, vector type factor.using single brace [\"coat\"] replacing index number \ne column name. Like example 1, returned object list.example uses single brace, time provide row column\nordinates. returned object value row 1, column 1. object\ninteger part vector type factor, R\nsplays label “calico” associated integer value.Like previous example use single braces provide row column\nordinates. row coordinate specified, R interprets missing\nlue elements column vector.use single brace row column coordinates. column\ncoordinate specified. return value list containing \nvalues first row.","code":"\ncats[1]# A tibble: 3 × 1\n  coat  \n  <chr> \n1 calico\n2 black \n3 tabby \ncats[[1]][1] \"calico\" \"black\"  \"tabby\" \ncats$coat[1] \"calico\" \"black\"  \"tabby\" \ncats[\"coat\"]# A tibble: 3 × 1\n  coat  \n  <chr> \n1 calico\n2 black \n3 tabby \ncats[1, 1]# A tibble: 1 × 1\n  coat  \n  <chr> \n1 calico\ncats[, 1]# A tibble: 3 × 1\n  coat  \n  <chr> \n1 calico\n2 black \n3 tabby \ncats[1, ]# A tibble: 1 × 4\n  coat   weight likes_string tail_length\n  <chr>   <dbl> <lgl>              <dbl>\n1 calico    2.6 TRUE                27.5"},{"path":"data-structures.html","id":"matrices","chapter":"4 Data Structures","heading":"4.8 Matrices","text":"Last least matrix. can declare matrix full zeros:similar data structures, can ask things matrix:","code":"\nmatrix_example <- matrix(0, ncol=6, nrow=3)\nmatrix_example     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    0    0    0    0    0    0\n[2,]    0    0    0    0    0    0\n[3,]    0    0    0    0    0    0\nclass(matrix_example)[1] \"matrix\" \"array\" \ntypeof(matrix_example)[1] \"double\"\nstr(matrix_example) num [1:3, 1:6] 0 0 0 0 0 0 0 0 0 0 ...\ndim(matrix_example)[1] 3 6\nnrow(matrix_example)[1] 3\nncol(matrix_example)[1] 6"},{"path":"data-structures.html","id":"challenge-4-1","chapter":"4 Data Structures","heading":"4.8.1 Challenge 4","text":"think result \nlength(matrix_example)?\nTry .\nright? / ?think result \nlength(matrix_example)?matrix vector added dimension attributes, length\ngives total number elements matrix.","code":"\nmatrix_example <- matrix(0, ncol=6, nrow=3)\nlength(matrix_example)[1] 18"},{"path":"data-structures.html","id":"challenge-5","chapter":"4 Data Structures","heading":"4.8.2 Challenge 5","text":"Make another matrix, time containing numbers 1:50,\n5 columns 10 rows.\nmatrix function fill matrix column, \nrow, default behaviour?\nSee can figure change .\n(hint: read documentation matrix()!)Make another matrix, time containing numbers 1:50,\n5 columns 10 rows.\nmatrix function fill matrix column, \nrow, default behaviour?\nSee can figure change .\n(hint: read documentation matrix!)","code":"\nx <- matrix(1:50, ncol=5, nrow=10)\nx <- matrix(1:50, ncol=5, nrow=10, byrow = TRUE) # to fill by row"},{"path":"data-structures.html","id":"challenge-6","chapter":"4 Data Structures","heading":"4.8.3 Challenge 6","text":"Create list length two containing character vector sections part workshop:Data typesData structuresPopulate character vector names data types data\nstructures ’ve seen far.","code":"\ndataTypes <- c('double', 'complex', 'integer', 'character', 'logical')\ndataStructures <- c('data.frame', 'vector', 'factor', 'list', 'matrix')\nanswer <- list(dataTypes, dataStructures)"},{"path":"data-structures.html","id":"challenge-7","chapter":"4 Data Structures","heading":"4.8.4 Challenge 7","text":"Consider R output matrix :correct command used write matrix? Examine\ncommand try figure correct one typing .\nThink matrices commands produce.matrix(c(4, 1, 9, 5, 10, 7), nrow = 3)matrix(c(4, 9, 10, 1, 5, 7), ncol = 2, byrow = TRUE)matrix(c(4, 9, 10, 1, 5, 7), nrow = 2)matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)Consider R output matrix :correct command used write matrix? Examine\ncommand try figure correct one typing .\nThink matrices commands produce.","code":"     [,1] [,2]\n[1,]    4    1\n[2,]    9    5\n[3,]   10    7     [,1] [,2]\n[1,]    4    1\n[2,]    9    5\n[3,]   10    7\nmatrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)"},{"path":"manipulating-data-frames-with-dplyr.html","id":"manipulating-data-frames-with-dplyr","chapter":"5 Manipulating Data Frames with dplyr","heading":"5 Manipulating Data Frames with dplyr","text":"point, ’ve seen : last lesson, toured basic data types data structures R. Everything manipulation tools. time, star show data frame—table created loading information csv file. lesson, ’ll learn things working data frames including might summarize dataframe grouping variable, including certain observations summary. popular package dplyr.can find size various attributes data handy functions:way get nice overall view data frame use summary function. function can used various objects R. data frames, summary yields numeric, tabular, descriptive summary column. Factor columns summarized number items level, numeric integer columns descriptive statistics (quartiles mean), character columns length, class, mode.really nice feature RStudio allows us view data \nreadable familiar way. Go ahead click name cats\ndata frame environment pane.Note read-view, ’s editable (good thing!)","code":"\nlibrary(readr)\ncats <- read_csv(\"data/feline-data.csv\")Rows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): coat\ndbl (2): weight, likes_string\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nnrow(cats)[1] 3\nncol(cats)[1] 3\ndim(cats)[1] 3 3\nnames(cats)[1] \"coat\"         \"weight\"       \"likes_string\"\nstr(cats)spc_tbl_ [3 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ coat        : chr [1:3] \"calico\" \"black\" \"tabby\"\n $ weight      : num [1:3] 2.1 5 3.2\n $ likes_string: num [1:3] 1 0 1\n - attr(*, \"spec\")=\n  .. cols(\n  ..   coat = col_character(),\n  ..   weight = col_double(),\n  ..   likes_string = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \nsummary(cats)     coat               weight       likes_string   \n Length:3           Min.   :2.100   Min.   :0.0000  \n Class :character   1st Qu.:2.650   1st Qu.:0.5000  \n Mode  :character   Median :3.200   Median :1.0000  \n                    Mean   :3.433   Mean   :0.6667  \n                    3rd Qu.:4.100   3rd Qu.:1.0000  \n                    Max.   :5.000   Max.   :1.0000  "},{"path":"manipulating-data-frames-with-dplyr.html","id":"introducing-the-gapminder-data","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.1 Introducing the Gapminder data","text":"far, seen basics manipulating data frames cat data;\nnow let’s use skills digest realistic dataset. Let’s read \ngapminder dataset downloaded previously assign data frame called gapminder:","code":"\ngapminder <- read_csv(\"data/gapminder_data.csv\")Rows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, pop, lifeExp, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"manipulating-data-frames-with-dplyr.html","id":"challenge-1-5-minutes-3","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.1.1 Challenge 1 (5 minutes)","text":"many rows columns gapminder ?kind data pop continent columns?first thing always check data looks like \nstr() summary():Miscellaneous TipsFiles can also downloaded directly Internet local\nfolder choice onto computer using download.file function.\nread_csv function can executed read downloaded file download location, example,Alternatively, can also read files directly R Internet replacing file paths web address read_csv. One note local copy csv file first saved onto computer. example,can read directly excel spreadsheets without\nconverting plain text first using readxl package.’ll also likely want know titles columns , can\nask :stage, ’s important ask structure R reporting\nmatches intuition expectations; basic data types reported \ncolumn make sense? , need sort problems now turn\nbad surprises road, using ’ve learned R\ninterprets data, importance strict consistency record \ndata.’re happy data types structures seem reasonable, ’s time\nstart digging data proper. Check first lines:Another helpful function looking data unique()\nfunction, see unique values particular column:Manipulation dataframes means many things many researchers, often\nselect certain observations (rows) variables (columns), often group \ndata certain variable(s), even calculate summary statistics. can\ntypes operations using normal base R operations:question might summarize \nsplit group might interested .","code":"\ndim(gapminder)[1] 1704    6\nnrow(gapminder)[1] 1704\nncol(gapminder)[1] 6\nstr(gapminder)spc_tbl_ [1,704 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ year     : num [1:1704] 1952 1957 1962 1967 1972 ...\n $ pop      : num [1:1704] 8425333 9240934 10267083 11537966 13079460 ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   country = col_character(),\n  ..   year = col_double(),\n  ..   pop = col_double(),\n  ..   continent = col_character(),\n  ..   lifeExp = col_double(),\n  ..   gdpPercap = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \nsummary(gapminder)   country               year           pop             continent        \n Length:1704        Min.   :1952   Min.   :6.001e+04   Length:1704       \n Class :character   1st Qu.:1966   1st Qu.:2.794e+06   Class :character  \n Mode  :character   Median :1980   Median :7.024e+06   Mode  :character  \n                    Mean   :1980   Mean   :2.960e+07                     \n                    3rd Qu.:1993   3rd Qu.:1.959e+07                     \n                    Max.   :2007   Max.   :1.319e+09                     \n    lifeExp        gdpPercap       \n Min.   :23.60   Min.   :   241.2  \n 1st Qu.:48.20   1st Qu.:  1202.1  \n Median :60.71   Median :  3531.8  \n Mean   :59.47   Mean   :  7215.3  \n 3rd Qu.:70.85   3rd Qu.:  9325.5  \n Max.   :82.60   Max.   :113523.1  \nstr(gapminder)spc_tbl_ [1,704 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ year     : num [1:1704] 1952 1957 1962 1967 1972 ...\n $ pop      : num [1:1704] 8425333 9240934 10267083 11537966 13079460 ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   country = col_character(),\n  ..   year = col_double(),\n  ..   pop = col_double(),\n  ..   continent = col_character(),\n  ..   lifeExp = col_double(),\n  ..   gdpPercap = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \nsummary(gapminder$country)   Length     Class      Mode \n     1704 character character \ndownload.file(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\", destfile = \"data/gapminder_data.csv\")\ngapminder <- read_csv(\"data/gapminder_data.csv\")\ngapminder <- read_csv(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\")\nnames(gapminder)[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\nhead(gapminder)# A tibble: 6 × 6\n  country      year      pop continent lifeExp gdpPercap\n  <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n1 Afghanistan  1952  8425333 Asia         28.8      779.\n2 Afghanistan  1957  9240934 Asia         30.3      821.\n3 Afghanistan  1962 10267083 Asia         32.0      853.\n4 Afghanistan  1967 11537966 Asia         34.0      836.\n5 Afghanistan  1972 13079460 Asia         36.1      740.\n6 Afghanistan  1977 14880372 Asia         38.4      786.\nunique(gapminder$continent)[1] \"Asia\"     \"Europe\"   \"Africa\"   \"Americas\" \"Oceania\" \nmean(gapminder$gdpPercap)[1] 7215.327"},{"path":"manipulating-data-frames-with-dplyr.html","id":"the-dplyr-package","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.2 The dplyr package","text":"Luckily, dplyr\npackage provides number useful functions manipulating dataframes\nway reduce repetition, reduce probability making\nerrors, probably even save typing. added bonus, might\neven find dplyr grammar easier read.’re going cover 5 commonly used functions well using\npipes (%>%) combine .select()filter()group_by()summarize()mutate()installed package earlier, please :Now let’s load package:","code":"\ninstall.packages('dplyr')\nlibrary(\"dplyr\")"},{"path":"manipulating-data-frames-with-dplyr.html","id":"using-select","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.3 Using select()","text":", example, wanted move forward variables \ndataframe use select() function. keep \nvariables select.","code":"\nyear_country_gdp <- select(gapminder, year, country, gdpPercap)"},{"path":"manipulating-data-frames-with-dplyr.html","id":"using-filter","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.4 Using filter()","text":"select subset rows:select another subset rows:used ‘normal’ grammar, strengths dplyr lie combining\nseveral functions using pipes. \ndescription useful:Since pipes grammar unlike anything ’ve seen R ,\nlet’s repeat ’ve done using pipes.help understand wrote way, let’s walk step\nstep. First summon gapminder dataframe pass , using pipe\nsymbol %>%, next step, select() function. case\ndon’t specify data object use select() function since \ngets previous pipe. Fun Fact: good chance \nencountered pipes shell. R, pipe symbol %>% \nshell | concept !","code":"\nfilter(gapminder, continent == \"Europe\")# A tibble: 360 × 6\n   country  year     pop continent lifeExp gdpPercap\n   <chr>   <dbl>   <dbl> <chr>       <dbl>     <dbl>\n 1 Albania  1952 1282697 Europe       55.2     1601.\n 2 Albania  1957 1476505 Europe       59.3     1942.\n 3 Albania  1962 1728137 Europe       64.8     2313.\n 4 Albania  1967 1984060 Europe       66.2     2760.\n 5 Albania  1972 2263554 Europe       67.7     3313.\n 6 Albania  1977 2509048 Europe       68.9     3533.\n 7 Albania  1982 2780097 Europe       70.4     3631.\n 8 Albania  1987 3075321 Europe       72       3739.\n 9 Albania  1992 3326498 Europe       71.6     2497.\n10 Albania  1997 3428038 Europe       73.0     3193.\n# … with 350 more rows\nfilter(gapminder, pop > 1000000)# A tibble: 1,524 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 1,514 more rowsI woke up %>% \n  showered %>% \n  dressed %>% \n  had coffee %>% \n  came to an R workshop\nyear_country_gdp <- gapminder %>% \n  select(year, country, gdpPercap)"},{"path":"manipulating-data-frames-with-dplyr.html","id":"using-filter-with-pipes","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.5 Using filter() with pipes","text":"now wanted move forward , European\ncountries, can combine select filter","code":"\nyear_country_gdp_euro <- gapminder %>%\n    filter(continent == \"Europe\") %>%\n    select(year, country, gdpPercap)"},{"path":"manipulating-data-frames-with-dplyr.html","id":"challenge-2-10-minutes-1","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.5.1 Challenge 2 (10 minutes)","text":"Write single command (can span multiple lines includes pipes) \nproduce dataframe African values lifeExp, country\nyear, Continents. many rows dataframe\n?last time, first pass gapminder dataframe filter()\nfunction, pass filtered version gapminder dataframe \nselect() function. Note: order operations important \ncase. used ‘select’ first, filter able find variable\ncontinent since removed previous step.","code":"\nyear_country_lifeExp_Africa <- gapminder %>%\n                           filter(continent == \"Africa\") %>%\n                           select(year, country, lifeExp)"},{"path":"manipulating-data-frames-with-dplyr.html","id":"using-group_by-and-summarize","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.6 Using group_by() and summarize()","text":"Now, supposed reducing error prone repetitiveness can\ndone base R, now haven’t done since \nrepeat continent. Instead filter(), pass\nobservations meet criteria (: continent==\"Europe\"), \ncan use group_by(), essentially use every unique criteria \nused filter.notice structure dataframe used group_by()\n(grouped_df) original gapminder (data.frame). \ngrouped_df can thought list item list \ndata.frame contains rows correspond particular\nvalue continent (least example ).","code":"\ngapminder# A tibble: 1,704 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 1,694 more rows\ngapminder %>% group_by(continent)# A tibble: 1,704 × 6\n# Groups:   continent [5]\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 1,694 more rows"},{"path":"manipulating-data-frames-with-dplyr.html","id":"using-summarize","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.7 Using summarize()","text":"bit uneventful side group_by() much \nexciting conjunction summarize(). allow us create new\nvariable(s) using functions repeat continent-specific\ndata frames. say, using group_by() function, split \noriginal dataframe multiple pieces, can run functions\n(e.g. mean() sd()) within summarize().allowed us calculate mean gdpPercap continent, gets\neven better.","code":"\ngdp_bycontinents <- gapminder %>%\n    group_by(continent) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap))# A tibble: 5 × 2\n  continent mean_gdpPercap\n  <chr>              <dbl>\n1 Africa             2194.\n2 Americas           7136.\n3 Asia               7902.\n4 Europe            14469.\n5 Oceania           18622."},{"path":"manipulating-data-frames-with-dplyr.html","id":"challenge-3-10-minutes","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.7.1 Challenge 3 (10 minutes)","text":"Calculate average life expectancy per country. longest average life\nexpectancy shortest average life expectancy?Another way use dplyr function arrange(), \narranges rows data frame according order one \nvariables data frame. similar syntax functions \ndplyr package. can use desc() inside arrange() sort \ndescending order.function group_by() allows us group multiple variables. Let’s group year continent.already quite powerful, gets even better! ’re limited defining 1 new variable summarize().","code":"\nlifeExp_bycountry <- gapminder %>%\n   group_by(country) %>%\n   summarize(mean_lifeExp = mean(lifeExp))\nlifeExp_bycountry %>%\n   filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp))# A tibble: 2 × 2\n country      mean_lifeExp\n <chr>               <dbl>\n1 Iceland              76.5\n2 Sierra Leone         36.8\nlifeExp_bycountry %>%\n   arrange(mean_lifeExp) %>%\n   head(1)# A tibble: 1 × 2\n country      mean_lifeExp\n <chr>               <dbl>\n1 Sierra Leone         36.8\nlifeExp_bycountry %>%\n   arrange(desc(mean_lifeExp)) %>%\n   head(1)# A tibble: 1 × 2\n country mean_lifeExp\n <chr>          <dbl>\n1 Iceland         76.5\ngdp_bycontinents_byyear <- gapminder %>%\n    group_by(continent, year) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap))`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\ngdp_pop_bycontinents_byyear <- gapminder %>%\n    group_by(continent, year) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap),\n              sd_gdpPercap = sd(gdpPercap),\n              mean_pop = mean(pop),\n              sd_pop = sd(pop))`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument."},{"path":"manipulating-data-frames-with-dplyr.html","id":"using-count","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.8 Using count()","text":"common operation count number observations \ngroup. dplyr package comes function helps .instance, wanted check number countries included \ndataset year 2002, can use count() function. takes name\none columns contain groups interested , can\noptionally sort results descending order adding sort=TRUE:","code":"\ngapminder %>%\n    filter(year == 2002) %>%\n    count(continent, sort = TRUE)# A tibble: 5 × 2\n  continent     n\n  <chr>     <int>\n1 Africa       52\n2 Asia         33\n3 Europe       30\n4 Americas     25\n5 Oceania       2"},{"path":"manipulating-data-frames-with-dplyr.html","id":"using-mutate","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.9 Using mutate()","text":"can also create new variables prior (even ) summarizing information using mutate().","code":"\ngdp_pop_bycontinents_byyear <- gapminder %>%\n    mutate(gdp_billion = gdpPercap*pop/10^9) %>%\n    group_by(continent,year) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap),\n              sd_gdpPercap = sd(gdpPercap),\n              mean_pop = mean(pop),\n              sd_pop = sd(pop),\n              mean_gdp_billion = mean(gdp_billion),\n              sd_gdp_billion = sd(gdp_billion))`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument."},{"path":"manipulating-data-frames-with-dplyr.html","id":"challenge-4-10-minutes","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.9.1 Challenge 4 (10 minutes)","text":"Calculate total GDP per contintent year. continent, year,\nhighest total GDP?","code":"\ngdp_by_continent_by_year <- gapminder %>% \n    mutate(gdp = gdpPercap * pop) %>%\n    group_by(continent, year) %>%\n    summarise(total_gdp = sum(gdp)) %>% \n    arrange(desc(total_gdp))`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument."},{"path":"manipulating-data-frames-with-dplyr.html","id":"connect-mutate-with-logical-groupings-ifelse","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.10 Connect mutate with logical groupings: ifelse","text":"creating new variables, can hook logical condition. simple combination \nmutate() ifelse() facilitates filtering right needed: moment creating something new.\neasy--read statement fast powerful way discarding certain data (even though overall dimension\ndata frame change) updating values depending given condition.","code":"\n## keeping all data but \"filtering\" after a certain condition\n# calculate GDP only for people with a life expectation above 25\ngdp_pop_bycontinents_byyear_above25 <- gapminder %>%\n    mutate(gdp_billion = ifelse(lifeExp > 25, gdpPercap * pop / 10^9, NA)) %>%\n    group_by(continent, year) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap),\n              sd_gdpPercap = sd(gdpPercap),\n              mean_pop = mean(pop),\n              sd_pop = sd(pop),\n              mean_gdp_billion = mean(gdp_billion),\n              sd_gdp_billion = sd(gdp_billion))`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n## updating only if certain condition is fullfilled\n# for life expectations above 40 years, the gpd to be expected in the future is scaled\ngdp_future_bycontinents_byyear_high_lifeExp <- gapminder %>%\n    mutate(gdp_futureExpectation = ifelse(lifeExp > 40, gdpPercap * 1.5, gdpPercap)) %>%\n    group_by(continent, year) %>%\n    summarize(mean_gdpPercap = mean(gdpPercap),\n              mean_gdpPercap_expected = mean(gdp_futureExpectation))`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument."},{"path":"manipulating-data-frames-with-dplyr.html","id":"combining-dplyr-and-ggplot2","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.11 Combining dplyr and ggplot2","text":"First install load ggplot2:plotting lesson looked make multi-panel figure adding\nlayer facet panels using ggplot2.code makes right plot also provides way chain operations. Just used\n%>% pipe data along chain dplyr functions can use pass data\nggplot(). %>% replaces first argument function don’t\nneed specify data = argument ggplot() function. combining\ndplyr ggplot2 functions can alter figure continents Europe.Using dplyr functions also helps us calculations fly, example interested \nconverting lifeExp years days:","code":"\ninstall.packages('ggplot2')\nlibrary(\"ggplot2\")\n# Filter countries that start with \"A\"\na_countries <- gapminder %>% \n  filter(country %in% c(\"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", \"Australia\", \"Austria\"))\n\n# Make the plot\nggplot(data = a_countries, aes(x = year, y = lifeExp, color = continent)) +\n  geom_line() + \n  facet_wrap(vars(country))\ngapminder %>%\n  filter(country %in% c(\"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", \"Australia\", \"Austria\")) %>% \n  filter(continent == \"Europe\") %>% \n  ggplot(aes(x = year, y = lifeExp, color = continent)) +\n  geom_line() +\n  facet_wrap(vars(country))\ngapminder %>%\n  filter(country %in% c(\"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", \"Australia\", \"Austria\")) %>% \n  filter(continent == \"Europe\") %>% \n  mutate(num_days = lifeExp*365) %>% \n  ggplot(aes(x = year, y = num_days, color = continent)) +\n  geom_line() +\n  facet_wrap(vars(country))"},{"path":"manipulating-data-frames-with-dplyr.html","id":"advanced-challenge","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.11.1 Advanced Challenge","text":"Calculate average life expectancy 2002 2 randomly selected countries\ncontinent. arrange continent names reverse order.\nHint: Use dplyr functions arrange() sample_n(), \nsimilar syntax dplyr functions.","code":"\nlifeExp_2countries_bycontinents <- gapminder %>%\n   filter(year==2002) %>%\n   group_by(continent) %>%\n   sample_n(2) %>%\n   summarize(mean_lifeExp=mean(lifeExp)) %>%\n   arrange(desc(mean_lifeExp))"},{"path":"manipulating-data-frames-with-dplyr.html","id":"other-great-resources","chapter":"5 Manipulating Data Frames with dplyr","heading":"5.12 Other great resources","text":"R Data ScienceData Wrangling Cheat sheetIntroduction dplyrData wrangling R RStudio","code":""},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"creating-publication-quality-graphics-with-ggplot2","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6 Creating Publication-Quality Graphics with ggplot2","text":"Plotting one best ways \nquickly explore data various relationships\nvariables.three main plotting systems R,\nbase plotting system, lattice\npackage, ggplot2 package.Today ’ll learning ggplot2 package, \neffective creating publication-quality\ngraphics.ggplot2 built grammar graphics, idea plot can \nexpressed set components: data set, \ncoordinate system, set geometric objects geoms—visual representation data points.key understanding ggplot2 thinking plot figure layers.\nidea may familiar used image editing programs like Photoshop, Illustrator, \nInkscape.","code":""},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"getting-started","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.1 Getting started","text":"Let’s start installing loading ggplot2 package:loading gapminder data:Now let’s jump right making example ggplot2 plot:first thing call ggplot() function. function lets R\nknow ’re creating new plot, arguments give \nggplot function global options plot: apply \nlayers plot.’ve passed two arguments ggplot. First, tell ggplot data \nwant show figure, example gapminder data read \nearlier. second argument—mapping—passed aes function, \ntells ggplot variables data map aesthetic properties \nfigure, case x y locations. told ggplot \nwant plot “gdpPercap” column gapminder data frame x-axis, \n“lifeExp” column y-axis. Notice didn’t need explicitly\npass aes columns (e.g. x = gapminder$gdpPercap), \nggplot smart enough know look data column!, call ggplot isn’t enough draw figure:need tell ggplot want visually represent data, \nadding new geom layer. example, used geom_point(), \ntells ggplot want visually represent relationship x \ny scatterplot points:Recap: Every ggplot2 plot three key components: (1) data, (2) set aesthetic mappings variables data visual properties plot, (3) least one layer, created geom function.","code":"\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\nlibrary(readr)\ngapminder <- read_csv(\"data/gapminder_data.csv\")Rows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, pop, lifeExp, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ngapminder# A tibble: 1,704 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 1,694 more rows\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"challenge-1-5-minutes-4","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.1.1 Challenge 1 (5 minutes)","text":"Modify example figure shows life expectancy \nchanged time:Hint: gapminder dataset column called “year”, appear\nx-axis.\none possible solution:","code":"\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\ngeom_point()\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp)) +\ngeom_point()"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"challenge-2-10-minutes-2","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.1.2 Challenge 2 (10 minutes)","text":"previous examples challenge ’ve used aes function tell\nscatterplot geom x y locations point.\nAnother aesthetic property can modify point colour. Modify \ncode previous challenge colour points “continent”\ncolumn. trends see data? expected?","code":"\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent)) +\n  geom_point()"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"layers","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.2 Layers","text":"Using scatterplot probably isn’t best visualizing change time.\nInstead, let’s tell ggplot visualize data line plot:Instead adding geom_point() layer, ’ve added geom_line() layer, however looks like lines connecting wrong points? need add group aesthetic, tells ggplot() draw line country.want visualize lines points plot? can simply add another layer plot:’s important note layer drawn top previous layer. \nexample, points drawn top lines. ’s \ndemonstration:example, aesthetic mapping colour moved \nglobal plot options ggplot geom_line layer longer applies\npoints. Now can clearly see points drawn top \nlines.Tip: Setting aesthetic value instead mappingSo far, ’ve seen use aesthetic (colour) mapping variable data. example, use geom_line(mapping = aes(colour = continent)), ggplot give different colour continent. want change colour lines blue? may think geom_line(mapping = aes(colour = \"blue\")) work, doesn’t. Since don’t want create mapping specific variable, simply move colour specification outside aes() function, like : geom_line(colour = \"blue\").","code":"\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent)) +\n  geom_line()\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent, group = country)) +\n  geom_line()\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, colour = continent, group = country)) +\n  geom_line() +\n  geom_point()\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country)) +\n  geom_line(mapping = aes(colour = continent)) +\n  geom_point()\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country)) +\n  geom_line(colour = \"blue\") +\n  geom_point()"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"challenge-3-5-minutes-1","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.2.1 Challenge 3 (5 minutes)","text":"Switch order point line layers previous example. \nhappened?lines now get drawn points!","code":"\nggplot(data = gapminder, mapping = aes(x = year, y = lifeExp, group = country)) +\n geom_point() +\n geom_line(mapping = aes(colour = continent))"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"transformations-and-statistics","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.3 Transformations and statistics","text":"ggplot2 also makes easy overlay statistical models data. \ndemonstrate ’ll go back first example:Currently ’s hard see relationship points due strong\noutliers GDP per capita. can change scale units x axis using\nscale functions. control mapping data values \nvisual values aesthetic. can also modify transparency \npoints, using alpha function, especially helpful \nlarge amount data clustered.log10 function applied transformation values gdpPercap\ncolumn rendering plot, multiple 10 now \ncorresponds increase 1 transformed scale, e.g. GDP per capita\n1,000 now 3 y axis, value 10,000 corresponds 4 y\naxis . makes easier visualize spread data \nx-axis.Tip Reminder: Setting aesthetic value instead mappingNotice used geom_point(alpha = 0.5). previous tip mentioned, using setting outside aes() function cause value used points, want case. just like aesthetic setting, alpha can also mapped variable data. example, can give different transparency continent geom_point(mapping = aes(alpha = continent)).can fit simple relationship data adding another layer, geom_smooth:can make line thicker setting size aesthetic \ngeom_smooth layer:two ways aesthetic can specified. set size\naesthetic passing argument geom_smooth. Previously \nlesson ’ve used aes function define mapping data\nvariables visual representation.","code":"\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(alpha = 0.5) +\n  scale_x_log10()\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10() +\n  geom_smooth(method = \"lm\")`geom_smooth()` using formula = 'y ~ x'\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10() +\n  geom_smooth(method = \"lm\", size = 1.5)Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.`geom_smooth()` using formula = 'y ~ x'"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"challenge-4a-10-minutes","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.3.1 Challenge 4a (10 minutes)","text":"Modify colour size points point layer previous\nexample.Hint: use aes() function.","code":"\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\n geom_point(size = 3, colour = \"orange\") +\n scale_x_log10() +\n geom_smooth(method = \"lm\", size = 1.5)`geom_smooth()` using formula = 'y ~ x'"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"challenge-4b-10-minutes","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.3.2 Challenge 4b (10 minutes)","text":"Modify solution Challenge 4a \npoints now different shape coloured continent new\ntrendlines.Hint: colour argument can used inside aesthetic.","code":"\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, colour = continent)) +\ngeom_point(size = 3, shape = 17) +\nscale_x_log10() +\ngeom_smooth(method = \"lm\", size = 1.5)`geom_smooth()` using formula = 'y ~ x'"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"multi-panel-figures","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.4 Multi-panel figures","text":"Earlier visualized change life expectancy time across \ncountries one plot. Alternatively, can split multiple panels\nadding layer facet panels.exercise use subset gapminder data. already familiar dplyr package, can subset gapminder data frame:can use read_csv function read subset gapminder data already provided /data folder:facet_wrap() layer took function vars() facet argument. tells R draw panel unique value variable country gapminder dataset.","code":"\nlibrary(dplyr)\nasia_oceania <- filter(gapminder, continent %in% c(\"Asia\", \"Oceania\"))\nasia_oceania <- read_csv(\"data/gapminder_asia_oceania.csv\")Rows: 210 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, pop, lifeExp, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nggplot(data = asia_oceania, mapping = aes(x = year, y = lifeExp)) +\n  geom_line() + \n  facet_wrap(facets = vars(country))"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"modifying-text","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.5 Modifying text","text":"clean figure publication need change text\nelements. x-axis cluttered, y axis read\n“Life Expectancy”, rather column name data frame.can adding couple different layers. theme layer\ncontrols axis text, overall text size. Labels axes, plot\ntitle legend can set using labs function. Legend titles\nset using names used aes specification. Thus \ncolour legend title set using colour = \"Continent\", title\nfill legend set using fill = \"MyTitle\".Tip: ThemingNote apply “theme” definition customize\nx-axis label sizes maintain readability. Nearly everything \nggplot2 customizable.can also use one many built themes ggplot2. Like geom layers, theme layer drawn top previous theme layer.","code":"\nggplot(data = asia_oceania, mapping = aes(x = year, y = lifeExp, colour = continent)) +\n  geom_line() +\n  facet_wrap(facets = vars(country)) +\n  labs(\n    x = \"Year\",              # x axis title\n    y = \"Life Expectancy\",   # y axis title\n    title = \"Figure 1\",      # main title of figure\n    colour = \"Continent\"      # title of legend\n  ) +\n  theme(axis.text.x = element_text(size = 5),\n        plot.title = element_text(face = \"bold\"))\nggplot(data = asia_oceania, mapping = aes(x = year, y = lifeExp, colour = continent)) +\n  geom_line() +\n  facet_wrap(facets = vars(country)) +\n  labs(\n    x = \"Year\",              # x axis title\n    y = \"Life Expectancy\",   # y axis title\n    title = \"Figure 1\",      # main title of figure\n    colour = \"Continent\"      # title of legend\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 5),\n        plot.title = element_text(face = \"bold\"))"},{"path":"creating-publication-quality-graphics-with-ggplot2.html","id":"exporting-the-plot","chapter":"6 Creating Publication-Quality Graphics with ggplot2","heading":"6.6 Exporting the plot","text":"ggsave() function allows export plot created ggplot2. can specify dimension resolution plot adjusting appropriate arguments (width, height dpi) create high quality graphics publication. order save plot , first assign variable lifeExp_plot, tell ggsave save plot png format directory called results. (Make sure results/ folder working directory.)two nice things ggsave. First, defaults last plot, omit plot argument automatically save last plot created ggplot. Secondly, tries determine format want save plot file extension provide filename (example .png .pdf). need , can specify format explicitly device argument.taste can ggplot2. RStudio provides \nreally useful cheat sheet different layers available, \nextensive documentation available ggplot2 website.\nFinally, idea change something, quick Google search \nusually send relevant question answer Stack Overflow RStudio Community website reusable\ncode modify. Finally, many websites provide examples ggplot2 plots open code, example R Graph Gallery.","code":"\nlifeExp_plot <- ggplot(data = asia_oceania, mapping = aes(x = year, y = lifeExp, colour = continent)) +\n  geom_line() +\n  facet_wrap(facets = vars(country)) +\n  labs(\n    x = \"Year\",              # x axis title\n    y = \"Life expectancy\",   # y axis title\n    title = \"Figure 1\",      # main title of figure\n    colour = \"Continent\"      # title of legend\n  ) +\n  theme(axis.text.x = element_text(size=10),\n        plot.title = element_text(face = \"bold\"))\n\nggsave(filename = \"results/lifeExp.png\", plot = lifeExp_plot, width = 18, height = 16, units = \"cm\")\n\nggsave(filename = \"results/lifeExp_widetv.png\", plot = lifeExp_plot, width = 13.33, height =  7.5)"},{"path":"create-tidy-data-with-tidyr.html","id":"create-tidy-data-with-tidyr","chapter":"7 Create Tidy Data with tidyr","heading":"7 Create Tidy Data with tidyr","text":"People work data often want reshape dataframes ‘wide’ ‘longer’\nlayouts, vice-versa. ‘long’ layout format :column variableeach row observationIn purely ‘long’ (‘longest’) format, usually 1 column observed variable columns ID variables.‘wide’ format row often site/subject/patient \nmultiple observation variables containing type data. can \neither repeated observations time, observation multiple variables (\nmix ). may find data input may simpler \napplications may prefer ‘wide’ format. However, many R‘s functions \ndesigned assuming ’longer’ formatted data. tutorial help \nefficiently transform data shape regardless original format.Long wide dataframe layouts mainly affect readability. humans, wide format often intuitive since can often see data screen due\nshape. However, long format machine readable closer\nformatting databases. ID variables dataframes similar \nfields database observed variables like database values.","code":""},{"path":"create-tidy-data-with-tidyr.html","id":"getting-started-1","chapter":"7 Create Tidy Data with tidyr","heading":"7.1 Getting started","text":"First install packages haven’t already done (probably\ninstalled dplyr previous lesson):Load packagesFirst, lets look structure original gapminder dataframe:","code":"\ninstall.packages(\"tidyr\")\ninstall.packages(\"dplyr\")\nlibrary(\"tidyr\")\nlibrary(\"dplyr\")\nlibrary(\"readr\")\ngapminder <- read_csv(\"data/gapminder_data.csv\")Rows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, pop, lifeExp, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ngapminder# A tibble: 1,704 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 1,694 more rows"},{"path":"create-tidy-data-with-tidyr.html","id":"challenge-1-1","chapter":"7 Create Tidy Data with tidyr","heading":"7.1.1 Challenge 1","text":"gapminder purely long, purely wide, intermediate format?Sometimes, gapminder dataset, multiple types observed\ndata. somewhere purely ‘long’ ‘wide’ data formats. \n3 “ID variables” (continent, country, year) 3 “Observation\nvariables” (pop,lifeExp,gdpPercap). intermediate format can \npreferred despite observations 1 column given 3\nobservation variables different units. operations \nneed us make dataframe longer (.e. 4 ID variables 1\nObservation variable).using many functions R, often vector based, \nusually want mathematical operations values different\nunits. example, using purely long format, single mean \nvalues population, life expectancy, GDP meaningful since \nreturn mean values 3 incompatible units. solution \nfirst manipulate data either grouping (see lesson dplyr), \nchange structure dataframe. Note: plotting functions \nR actually work better wide format data.","code":""},{"path":"create-tidy-data-with-tidyr.html","id":"from-wide-to-long-format-with-pivot_longer","chapter":"7 Create Tidy Data with tidyr","heading":"7.2 From wide to long format with pivot_longer()","text":"now, ’ve using nicely formatted original gapminder dataset, \n‘real’ data (.e. research data) never well organized. \nlet’s start wide formatted version gapminder dataset.’ll load data file look .change wide dataframe layout back nice, intermediate (longer) layout, use one two available pivot functions tidyr package. convert wide longer format, use pivot_longer() function. pivot_longer() makes datasets longer increasing number rows decreasing number columns, ‘lengthening’ observation variables single variable.used piping syntax similar \nprevious lesson dplyr. fact, compatible can use mix\ntidyr dplyr functions piping together.first provide pivot_longer() vector column names \npivoted longer format. type observation variables, \nselect() function, can use : operator select desired variables.\npivot_longer() also allows alternative syntax using - symbol \nidentify variables pivoted (.e. ID variables).next arguments pivot_longer() names_to naming column \ncontain new ID variable (obstype_year) values_to naming \nnew amalgamated observation variable (obs_value). supply new column\nnames strings.may seem trivial particular dataframe, sometimes 1\nID variable 40 observation variables irregular variable names. \nflexibility huge time saver!Now obstype_year actually contains 2 pieces information, observation\ntype (pop,lifeExp, gdpPercap) year. can use \nseparate() function split character strings multiple variables","code":"\ngap_wide <- read_csv(\"data/gapminder_wide.csv\")Rows: 142 Columns: 38\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): continent, country\ndbl (36): pop_1952, lifeExp_1952, gdpPercap_1952, pop_1957, lifeExp_1957, gd...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ngap_wide# A tibble: 142 × 38\n   continent country     pop_1…¹ lifeE…² gdpPe…³ pop_1…⁴ lifeE…⁵ gdpPe…⁶ pop_1…⁷\n   <chr>     <chr>         <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Asia      Afghanistan  8.43e6    28.8    779.  9.24e6    30.3    821.  1.03e7\n 2 Europe    Albania      1.28e6    55.2   1601.  1.48e6    59.3   1942.  1.73e6\n 3 Africa    Algeria      9.28e6    43.1   2449.  1.03e7    45.7   3014.  1.10e7\n 4 Africa    Angola       4.23e6    30.0   3521.  4.56e6    32.0   3828.  4.83e6\n 5 Americas  Argentina    1.79e7    62.5   5911.  1.96e7    64.4   6857.  2.13e7\n 6 Oceania   Australia    8.69e6    69.1  10040.  9.71e6    70.3  10950.  1.08e7\n 7 Europe    Austria      6.93e6    66.8   6137.  6.97e6    67.5   8843.  7.13e6\n 8 Asia      Bahrain      1.20e5    50.9   9867.  1.39e5    53.8  11636.  1.72e5\n 9 Asia      Bangladesh   4.69e7    37.5    684.  5.14e7    39.3    662.  5.68e7\n10 Europe    Belgium      8.73e6    68     8343.  8.99e6    69.2   9715.  9.22e6\n# … with 132 more rows, 29 more variables: lifeExp_1962 <dbl>,\n#   gdpPercap_1962 <dbl>, pop_1967 <dbl>, lifeExp_1967 <dbl>,\n#   gdpPercap_1967 <dbl>, pop_1972 <dbl>, lifeExp_1972 <dbl>,\n#   gdpPercap_1972 <dbl>, pop_1977 <dbl>, lifeExp_1977 <dbl>,\n#   gdpPercap_1977 <dbl>, pop_1982 <dbl>, lifeExp_1982 <dbl>,\n#   gdpPercap_1982 <dbl>, pop_1987 <dbl>, lifeExp_1987 <dbl>,\n#   gdpPercap_1987 <dbl>, pop_1992 <dbl>, lifeExp_1992 <dbl>, …\ngap_long <- gap_wide %>%\n  pivot_longer(\n    cols = pop_1952:gdpPercap_2007,\n    names_to = \"obstype_year\", values_to = \"obs_values\"\n  )\ngap_long# A tibble: 5,112 × 4\n   continent country     obstype_year   obs_values\n   <chr>     <chr>       <chr>               <dbl>\n 1 Asia      Afghanistan pop_1952        8425333  \n 2 Asia      Afghanistan lifeExp_1952         28.8\n 3 Asia      Afghanistan gdpPercap_1952      779. \n 4 Asia      Afghanistan pop_1957        9240934  \n 5 Asia      Afghanistan lifeExp_1957         30.3\n 6 Asia      Afghanistan gdpPercap_1957      821. \n 7 Asia      Afghanistan pop_1962       10267083  \n 8 Asia      Afghanistan lifeExp_1962         32.0\n 9 Asia      Afghanistan gdpPercap_1962      853. \n10 Asia      Afghanistan pop_1967       11537966  \n# … with 5,102 more rows\ngap_long <- gap_wide %>%\n  pivot_longer(\n    cols = c(-continent, -country),\n    names_to = \"obstype_year\", values_to = \"obs_values\"\n  )\ngap_long# A tibble: 5,112 × 4\n   continent country     obstype_year   obs_values\n   <chr>     <chr>       <chr>               <dbl>\n 1 Asia      Afghanistan pop_1952        8425333  \n 2 Asia      Afghanistan lifeExp_1952         28.8\n 3 Asia      Afghanistan gdpPercap_1952      779. \n 4 Asia      Afghanistan pop_1957        9240934  \n 5 Asia      Afghanistan lifeExp_1957         30.3\n 6 Asia      Afghanistan gdpPercap_1957      821. \n 7 Asia      Afghanistan pop_1962       10267083  \n 8 Asia      Afghanistan lifeExp_1962         32.0\n 9 Asia      Afghanistan gdpPercap_1962      853. \n10 Asia      Afghanistan pop_1967       11537966  \n# … with 5,102 more rows\ngap_long_split <- gap_long %>% \n    separate(obstype_year, into = c('obs_type', 'year'), sep = \"_\") %>% \n    mutate(year = as.numeric(year))"},{"path":"create-tidy-data-with-tidyr.html","id":"challenge-2-5-minutes-1","chapter":"7 Create Tidy Data with tidyr","heading":"7.2.1 Challenge 2 (5 minutes)","text":"Using gap_long_split, calculate mean life expectancy, population, gdpPercap continent.\nHint: use group_by() summarize() functions learned dplyr lesson","code":"\ngap_long_split %>% \n  group_by(continent, obs_type) %>%\n  summarize(means=mean(obs_values))`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.# A tibble: 15 × 3\n# Groups:   continent [5]\n  continent obs_type       means\n  <chr>     <chr>          <dbl>\n1 Africa    gdpPercap     2194. \n2 Africa    lifeExp         48.9\n3 Africa    pop        9916003. \n4 Americas  gdpPercap     7136. \n5 Americas  lifeExp         64.7\n6 Americas  pop       24504795. \n7 Asia      gdpPercap     7902. \n8 Asia      lifeExp         60.1\n9 Asia      pop       77038722. \n10 Europe    gdpPercap    14469. \n11 Europe    lifeExp         71.9\n12 Europe    pop       17169765. \n13 Oceania   gdpPercap    18622. \n14 Oceania   lifeExp         74.3\n15 Oceania   pop        8874672. "},{"path":"create-tidy-data-with-tidyr.html","id":"from-long-to-intermediate-format-with-pivot_wider","chapter":"7 Create Tidy Data with tidyr","heading":"7.3 From long to intermediate format with pivot_wider()","text":"always good check work. , let’s use second pivot function, pivot_wider(), ‘widen’ observation variables back . pivot_wider() opposite pivot_longer(), making dataset wider increasing number columns decreasing number rows. can use pivot_wider() pivot reshape gap_long_split original intermediate format widest format. Let’s start intermediate format.pivot_wider() function takes names_from values_from arguments.names_from supply column name whose contents pivoted new\noutput columns widened dataframe. corresponding values added\ncolumn named values_from argument.Now ’ve got intermediate dataframe gap_normal dimensions \noriginal gapminder, order variables different. Let’s fix\nchecking .equal().’re almost , original sorted country, \nyear.’s great! ’ve gone longest format back intermediate \ndidn’t introduce errors code.Now let’s convert long way back wide. wide format, \nkeep country continent ID variables pivot observations\nacross 3 metrics (pop,lifeExp,gdpPercap) time (year). First \nneed create appropriate labels new variables (time*metric\ncombinations) also need unify ID variables simplify process\ndefining gap_wide.Using unite() now single ID variable combination \ncontinent,country,defined variable names. ’re now ready \npipe pivot_wider()","code":"\ngap_normal <- gap_long_split %>%\n  pivot_wider(names_from = obs_type, values_from = obs_values)\ndim(gap_normal)[1] 1704    6\ndim(gapminder)[1] 1704    6\nnames(gap_normal)[1] \"continent\" \"country\"   \"year\"      \"pop\"       \"lifeExp\"   \"gdpPercap\"\nnames(gapminder)[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\ngap_normal <- gap_normal %>% \n    select(country, year, pop, continent, lifeExp, gdpPercap) \nall_equal(gap_normal, gapminder)[1] TRUE\ngap_normal# A tibble: 1,704 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 1,694 more rows\ngapminder# A tibble: 1,704 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 1,694 more rows\ngap_normal <- gap_normal %>% arrange(country, year)\nall_equal(gap_normal, gapminder)[1] TRUE\ngap_temp <- gap_long_split %>% unite(var_ID, continent, country, sep = \"_\")\ngap_temp# A tibble: 5,112 × 4\n   var_ID           obs_type   year obs_values\n   <chr>            <chr>     <dbl>      <dbl>\n 1 Asia_Afghanistan pop        1952  8425333  \n 2 Asia_Afghanistan lifeExp    1952       28.8\n 3 Asia_Afghanistan gdpPercap  1952      779. \n 4 Asia_Afghanistan pop        1957  9240934  \n 5 Asia_Afghanistan lifeExp    1957       30.3\n 6 Asia_Afghanistan gdpPercap  1957      821. \n 7 Asia_Afghanistan pop        1962 10267083  \n 8 Asia_Afghanistan lifeExp    1962       32.0\n 9 Asia_Afghanistan gdpPercap  1962      853. \n10 Asia_Afghanistan pop        1967 11537966  \n# … with 5,102 more rows\ngap_temp <- gap_long_split %>%\n    unite(ID_var, continent, country, sep = \"_\") %>%\n    unite(var_names, obs_type, year, sep = \"_\")\ngap_temp# A tibble: 5,112 × 3\n   ID_var           var_names      obs_values\n   <chr>            <chr>               <dbl>\n 1 Asia_Afghanistan pop_1952        8425333  \n 2 Asia_Afghanistan lifeExp_1952         28.8\n 3 Asia_Afghanistan gdpPercap_1952      779. \n 4 Asia_Afghanistan pop_1957        9240934  \n 5 Asia_Afghanistan lifeExp_1957         30.3\n 6 Asia_Afghanistan gdpPercap_1957      821. \n 7 Asia_Afghanistan pop_1962       10267083  \n 8 Asia_Afghanistan lifeExp_1962         32.0\n 9 Asia_Afghanistan gdpPercap_1962      853. \n10 Asia_Afghanistan pop_1967       11537966  \n# … with 5,102 more rows\ngap_wide_new <- gap_long_split %>%\n  unite(ID_var, continent, country, sep = \"_\") %>%\n  unite(var_names, obs_type, year, sep = \"_\") %>%\n  pivot_wider(names_from = var_names, values_from = obs_values)\ngap_wide_new# A tibble: 142 × 37\n   ID_var        pop_1…¹ lifeE…² gdpPe…³ pop_1…⁴ lifeE…⁵ gdpPe…⁶ pop_1…⁷ lifeE…⁸\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Asia_Afghani…  8.43e6    28.8    779.  9.24e6    30.3    821.  1.03e7    32.0\n 2 Europe_Alban…  1.28e6    55.2   1601.  1.48e6    59.3   1942.  1.73e6    64.8\n 3 Africa_Alger…  9.28e6    43.1   2449.  1.03e7    45.7   3014.  1.10e7    48.3\n 4 Africa_Angola  4.23e6    30.0   3521.  4.56e6    32.0   3828.  4.83e6    34  \n 5 Americas_Arg…  1.79e7    62.5   5911.  1.96e7    64.4   6857.  2.13e7    65.1\n 6 Oceania_Aust…  8.69e6    69.1  10040.  9.71e6    70.3  10950.  1.08e7    70.9\n 7 Europe_Austr…  6.93e6    66.8   6137.  6.97e6    67.5   8843.  7.13e6    69.5\n 8 Asia_Bahrain   1.20e5    50.9   9867.  1.39e5    53.8  11636.  1.72e5    56.9\n 9 Asia_Banglad…  4.69e7    37.5    684.  5.14e7    39.3    662.  5.68e7    41.2\n10 Europe_Belgi…  8.73e6    68     8343.  8.99e6    69.2   9715.  9.22e6    70.2\n# … with 132 more rows, 28 more variables: gdpPercap_1962 <dbl>,\n#   pop_1967 <dbl>, lifeExp_1967 <dbl>, gdpPercap_1967 <dbl>, pop_1972 <dbl>,\n#   lifeExp_1972 <dbl>, gdpPercap_1972 <dbl>, pop_1977 <dbl>,\n#   lifeExp_1977 <dbl>, gdpPercap_1977 <dbl>, pop_1982 <dbl>,\n#   lifeExp_1982 <dbl>, gdpPercap_1982 <dbl>, pop_1987 <dbl>,\n#   lifeExp_1987 <dbl>, gdpPercap_1987 <dbl>, pop_1992 <dbl>,\n#   lifeExp_1992 <dbl>, gdpPercap_1992 <dbl>, pop_1997 <dbl>, …"},{"path":"create-tidy-data-with-tidyr.html","id":"challenge-3-10-minutes-1","chapter":"7 Create Tidy Data with tidyr","heading":"7.3.1 Challenge 3 (10 minutes)","text":"Take 1 step create gap_ludicrously_wide format data pivoting countries, year 3 metrics?\nHint new dataframe 5 rows.Now great ‘wide’ format dataframe, ID_var \nusable, let’s separate 2 variables separate()back !","code":"\ngap_ludicrously_wide <- gap_long_split %>%\n   unite(var_names, obs_type, year, country, sep = \"_\") %>%\n   pivot_wider(names_from = var_names, values_from = obs_values)\ngap_wide_betterID <- separate(gap_wide_new, ID_var, c(\"continent\", \"country\"), sep=\"_\")\ngap_wide_betterID <- gap_long_split %>%\n    unite(ID_var, continent, country, sep = \"_\") %>%\n    unite(var_names, obs_type, year, sep = \"_\") %>%\n    pivot_wider(names_from = var_names, values_from = obs_values) %>%\n    separate(ID_var, c(\"continent\",\"country\"), sep = \"_\")\ngap_wide_betterID# A tibble: 142 × 38\n   continent country     pop_1…¹ lifeE…² gdpPe…³ pop_1…⁴ lifeE…⁵ gdpPe…⁶ pop_1…⁷\n   <chr>     <chr>         <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Asia      Afghanistan  8.43e6    28.8    779.  9.24e6    30.3    821.  1.03e7\n 2 Europe    Albania      1.28e6    55.2   1601.  1.48e6    59.3   1942.  1.73e6\n 3 Africa    Algeria      9.28e6    43.1   2449.  1.03e7    45.7   3014.  1.10e7\n 4 Africa    Angola       4.23e6    30.0   3521.  4.56e6    32.0   3828.  4.83e6\n 5 Americas  Argentina    1.79e7    62.5   5911.  1.96e7    64.4   6857.  2.13e7\n 6 Oceania   Australia    8.69e6    69.1  10040.  9.71e6    70.3  10950.  1.08e7\n 7 Europe    Austria      6.93e6    66.8   6137.  6.97e6    67.5   8843.  7.13e6\n 8 Asia      Bahrain      1.20e5    50.9   9867.  1.39e5    53.8  11636.  1.72e5\n 9 Asia      Bangladesh   4.69e7    37.5    684.  5.14e7    39.3    662.  5.68e7\n10 Europe    Belgium      8.73e6    68     8343.  8.99e6    69.2   9715.  9.22e6\n# … with 132 more rows, 29 more variables: lifeExp_1962 <dbl>,\n#   gdpPercap_1962 <dbl>, pop_1967 <dbl>, lifeExp_1967 <dbl>,\n#   gdpPercap_1967 <dbl>, pop_1972 <dbl>, lifeExp_1972 <dbl>,\n#   gdpPercap_1972 <dbl>, pop_1977 <dbl>, lifeExp_1977 <dbl>,\n#   gdpPercap_1977 <dbl>, pop_1982 <dbl>, lifeExp_1982 <dbl>,\n#   gdpPercap_1982 <dbl>, pop_1987 <dbl>, lifeExp_1987 <dbl>,\n#   gdpPercap_1987 <dbl>, pop_1992 <dbl>, lifeExp_1992 <dbl>, …\nall_equal(gap_wide, gap_wide_betterID)[1] TRUE"},{"path":"create-tidy-data-with-tidyr.html","id":"other-great-resources-1","chapter":"7 Create Tidy Data with tidyr","heading":"7.4 Other great resources","text":"R Data ScienceData Wrangling Cheat sheetIntroduction tidyrData wrangling R RStudio","code":""},{"path":"joining-related-data.html","id":"joining-related-data","chapter":"8 Joining Related Data","heading":"8 Joining Related Data","text":"","code":""},{"path":"joining-related-data.html","id":"introducing-relational-data","chapter":"8 Joining Related Data","heading":"8.1 Introducing Relational Data","text":"real life, often two related datasets share set common columns. like combine two datasets based common columns, known key key variables.may want change dataset adding information second dataset.\nexample, say dataset containing employee information employee ID,\nname, job position, hire date, etc., second dataset containing \ncurrent historical wages job position. relevant join – adding \ncolumn data row – may merging current wage employee\nemployee dataset.may also want choose portion dataset. example, say dataset including students ever attended school along student ID, years attended, grades class, graduation date (applicable), , second dataset simply list current students. relevant join\n– retaining columns data, specific rows – may reduction\nfirst dataset students currently attendance, \ninformation (e.g., grades, etc.).first example mutating join - change one table\nadding data second table, based matching key variable\nexists tables. second example filtering join -\nsubset one table based data second table, based matching\nkey variable.","code":""},{"path":"joining-related-data.html","id":"types-of-joins-with-dplyr","chapter":"8 Joining Related Data","heading":"8.2 Types of joins with dplyr","text":"dplyr package several functions allow us make joins.\nAssume tables x y.four types mutating joins, add new variables one\ntable matching rows another:inner joins include rows x yinner joins include rows x yleft joins include rows x plus matching rows yleft joins include rows x plus matching rows yfull joins include rows x yfull joins include rows x yright joins include rows y plus matching rows xright joins include rows y plus matching rows xNote left, full right joins also called outer joins.two types filtering joins, filter observations one\ntable based whether match observation table:semi joins return rows x match ysemi joins return rows x match yanti joins return rows x match yanti joins return rows x match yThe syntax dplyr joins simple: xxx_join(x, y, = \"key_variable\").","code":""},{"path":"joining-related-data.html","id":"introducing-the-nycflights13-data","chapter":"8 Joining Related Data","heading":"8.3 Introducing the nycflights13 data","text":"prior lessons, seen datasets gapminder cat data.\nNow let’s use different dataset, nycflights13 package1,\nexplore relational data.package contains information flights departed \nNew York City (e.g., EWR, JFK LGA) destinations 2013. help\nunderstand causes delays, also includes number useful datasets:weather: hourly meteorological data airportplanes: construction information planeairports: airport names locationsairlines: translation two letter carrier codes namesThis diagram shows relationships among five datasets:Source: https://r4ds..co.nz/relational-data.htmlThe key variables flights datasets :flights dataset <- origin dest = faa -> airports datasetflights dataset <- tailnum -> planes datasetflights dataset <- origin, year, month, day, hour -> weather datasetflights dataset <- carrier -> airlines dataset","code":""},{"path":"joining-related-data.html","id":"getting-started-2","chapter":"8 Joining Related Data","heading":"8.4 Getting started","text":"First, install packages haven’t already done (probably\ninstalled dplyr previous lesson):, load packages:Let’s take peek main nycflights13 dataset, “flights”:get information flights dataset:tells us airline name, opposed two-letter carrier abbreviation,\ncan found airlines dataset, airports dataset gives\ninformation flight destinations.First, drop variables flights make work evident.","code":"\ninstall.packages(\"dplyr\")\ninstall.packages(\"nycflights13\")\nlibrary(dplyr)\nlibrary(nycflights13)\nflights# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n?flights\nflights_mini <- flights %>% select(year:day, dep_delay, carrier:dest)\nflights_mini# A tibble: 336,776 × 9\n    year month   day dep_delay carrier flight tailnum origin dest \n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>\n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH  \n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH  \n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA  \n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN  \n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL  \n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD  \n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL  \n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD  \n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO  \n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD  \n# … with 336,766 more rows"},{"path":"joining-related-data.html","id":"data-analysis-questions","chapter":"8 Joining Related Data","heading":"8.4.1 Data analysis questions","text":"answer following questions:total number flights per airline, \nairline name showing instead carrier abbreviation?total number flights per airline, \nairline name showing instead carrier abbreviation?many flights occurred temperature fell freezing?many flights occurred temperature fell freezing?older planes likely delayed arrival?older planes likely delayed arrival?Answering questions requires us join datasets.","code":""},{"path":"joining-related-data.html","id":"using-left_join","chapter":"8 Joining Related Data","heading":"8.5 Using left_join()","text":"syntax dplyr joins : xxx_join(x, y, = \"key_variable\").answer first question (.e., number flights per airline), need\njoin flights airlines datasets. want left join \nwant add airline names airlines (second table) flights\n(first table). , know flights dataset variable\ncalled ‘carrier’, variable airlines dataset – \nkey (“” variable).can see number rows stayed : 366,776, \none new column (end) called “name”.Note instead used pipe operator summoning ‘flights_mini’.Now, let’s wrangle get total counts, grouping either carrier \nnew “name” variable brought airlines dataset. Note can also\ndrop argument names (e.g., “y” “y = airlines”). tend keep \n“” argument name keep code bit clear.can also rename variables within join call. Let’s rename “name” \n“airline” (sort descending number flights).","code":"\nleft_join(x = flights_mini, y = airlines, by = \"carrier\")# A tibble: 336,776 × 10\n    year month   day dep_delay carrier flight tailnum origin dest  name         \n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <chr>        \n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH   United Air L…\n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH   United Air L…\n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA   American Air…\n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN   JetBlue Airw…\n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL   Delta Air Li…\n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD   United Air L…\n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL   JetBlue Airw…\n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD   ExpressJet A…\n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO   JetBlue Airw…\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD   American Air…\n# … with 336,766 more rows\nflights_mini %>% left_join(y = airlines, by = \"carrier\")# A tibble: 336,776 × 10\n    year month   day dep_delay carrier flight tailnum origin dest  name         \n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <chr>        \n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH   United Air L…\n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH   United Air L…\n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA   American Air…\n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN   JetBlue Airw…\n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL   Delta Air Li…\n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD   United Air L…\n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL   JetBlue Airw…\n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD   ExpressJet A…\n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO   JetBlue Airw…\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD   American Air…\n# … with 336,766 more rows\nflights_mini %>%\n  left_join(airlines, by = \"carrier\") %>%\n  group_by(name) %>%\n  summarize(total_flights = n())# A tibble: 16 × 2\n   name                        total_flights\n   <chr>                               <int>\n 1 AirTran Airways Corporation          3260\n 2 Alaska Airlines Inc.                  714\n 3 American Airlines Inc.              32729\n 4 Delta Air Lines Inc.                48110\n 5 Endeavor Air Inc.                   18460\n 6 Envoy Air                           26397\n 7 ExpressJet Airlines Inc.            54173\n 8 Frontier Airlines Inc.                685\n 9 Hawaiian Airlines Inc.                342\n10 JetBlue Airways                     54635\n11 Mesa Airlines Inc.                    601\n12 SkyWest Airlines Inc.                  32\n13 Southwest Airlines Co.              12275\n14 United Air Lines Inc.               58665\n15 US Airways Inc.                     20536\n16 Virgin America                       5162\nflights_mini %>%\n  left_join(airlines %>% select(carrier, Airline = name), by = \"carrier\") %>%\n  ## make sure you use the new variable name\n  group_by(Airline) %>%\n  summarize(`Total Flights` = n()) %>% \n  arrange(desc(`Total Flights`))# A tibble: 16 × 2\n   Airline                     `Total Flights`\n   <chr>                                 <int>\n 1 United Air Lines Inc.                 58665\n 2 JetBlue Airways                       54635\n 3 ExpressJet Airlines Inc.              54173\n 4 Delta Air Lines Inc.                  48110\n 5 American Airlines Inc.                32729\n 6 Envoy Air                             26397\n 7 US Airways Inc.                       20536\n 8 Endeavor Air Inc.                     18460\n 9 Southwest Airlines Co.                12275\n10 Virgin America                         5162\n11 AirTran Airways Corporation            3260\n12 Alaska Airlines Inc.                    714\n13 Frontier Airlines Inc.                  685\n14 Mesa Airlines Inc.                      601\n15 Hawaiian Airlines Inc.                  342\n16 SkyWest Airlines Inc.                    32"},{"path":"joining-related-data.html","id":"challenge-1-2-minutes","chapter":"8 Joining Related Data","heading":"8.5.1 Challenge 1 (2 minutes)","text":"add plane’s manufacture year (rename “manufacture_year”)\nflights dataset?One thing haven’t specifically noted mutating joins bring \nvariables matching dataset. ’ll see solution \ncan change behaviour using select() listing variables \nwant join (don’t forget key variable!).","code":"\nleft_join(flights_mini, planes %>% select(tailnum, manufacture_year = year), by = \"tailnum\")# A tibble: 336,776 × 10\n   year month   day dep_delay carrier flight tailnum origin dest  manufacture…¹\n  <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>         <int>\n1  2013     1     1         2 UA        1545 N14228  EWR    IAH            1999\n2  2013     1     1         4 UA        1714 N24211  LGA    IAH            1998\n3  2013     1     1         2 AA        1141 N619AA  JFK    MIA            1990\n4  2013     1     1        -1 B6         725 N804JB  JFK    BQN            2012\n5  2013     1     1        -6 DL         461 N668DN  LGA    ATL            1991\n6  2013     1     1        -4 UA        1696 N39463  EWR    ORD            2012\n7  2013     1     1        -5 B6         507 N516JB  EWR    FLL            2000\n8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD            1998\n9  2013     1     1        -3 B6          79 N593JB  JFK    MCO            2004\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD              NA\n# … with 336,766 more rows, and abbreviated variable name ¹​manufacture_year\n## same as this:\nflights_mini %>% \n  left_join(planes %>% select(tailnum, manufacture_year = year), by = \"tailnum\")# A tibble: 336,776 × 10\n   year month   day dep_delay carrier flight tailnum origin dest  manufacture…¹\n  <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>         <int>\n1  2013     1     1         2 UA        1545 N14228  EWR    IAH            1999\n2  2013     1     1         4 UA        1714 N24211  LGA    IAH            1998\n3  2013     1     1         2 AA        1141 N619AA  JFK    MIA            1990\n4  2013     1     1        -1 B6         725 N804JB  JFK    BQN            2012\n5  2013     1     1        -6 DL         461 N668DN  LGA    ATL            1991\n6  2013     1     1        -4 UA        1696 N39463  EWR    ORD            2012\n7  2013     1     1        -5 B6         507 N516JB  EWR    FLL            2000\n8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD            1998\n9  2013     1     1        -3 B6          79 N593JB  JFK    MCO            2004\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD              NA\n# … with 336,766 more rows, and abbreviated variable name ¹​manufacture_year"},{"path":"joining-related-data.html","id":"modifying-the-by-argument","chapter":"8 Joining Related Data","heading":"8.5.2 Modifying the by argument","text":"","code":""},{"path":"joining-related-data.html","id":"no-by-specification","chapter":"8 Joining Related Data","heading":"8.5.2.1 > no by specification","text":"can modify “” argument ways. See happens don’t\nspecify variable.R match variable name datasets. careful -\nmight want!variable “year” exists flights_mini planes, means different\nthings. specifying key, R assumed wanted join “year” \nwell, resulted lot NAs!","code":"\n## joining without specifying a `by` variable\nleft_join(flights_mini, airlines)Joining, by = \"carrier\"# A tibble: 336,776 × 10\n    year month   day dep_delay carrier flight tailnum origin dest  name         \n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <chr>        \n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH   United Air L…\n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH   United Air L…\n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA   American Air…\n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN   JetBlue Airw…\n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL   Delta Air Li…\n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD   United Air L…\n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL   JetBlue Airw…\n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD   ExpressJet A…\n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO   JetBlue Airw…\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD   American Air…\n# … with 336,766 more rows\nleft_join(flights_mini, planes)Joining, by = c(\"year\", \"tailnum\")# A tibble: 336,776 × 16\n    year month   day dep_delay carrier flight tailnum origin dest  type  manuf…¹\n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <chr> <chr>  \n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH   <NA>  <NA>   \n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH   <NA>  <NA>   \n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA   <NA>  <NA>   \n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN   <NA>  <NA>   \n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL   <NA>  <NA>   \n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD   <NA>  <NA>   \n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL   <NA>  <NA>   \n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD   <NA>  <NA>   \n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO   <NA>  <NA>   \n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD   <NA>  <NA>   \n# … with 336,766 more rows, 5 more variables: model <chr>, engines <int>,\n#   seats <int>, speed <int>, engine <chr>, and abbreviated variable name\n#   ¹​manufacturer"},{"path":"joining-related-data.html","id":"multiple-keys","chapter":"8 Joining Related Data","heading":"8.5.2.2 > multiple keys","text":"may noticed earlier can join one variable. \n, simply use c(\"variable1\", \"variable2\", \"etc\") keys. Notice \nyear, month, day, origin flights_mini weather datasets.’ll see now 8 million rows. “hour”\nvariable weather matched many times year X month X day X origin\ncombination, resulting repeat information flights_mini.happens didn’t know “year” datasets?“year” variable flights_mini renamed “year.x”, “year”\n“weather” renamed “year.y”. (Whenever happens, variables\nending “.x” come first table, ending “.y” come \ntable.)","code":"\nleft_join(flights_mini, weather, by = c(\"year\", \"month\", \"day\", \"origin\"))# A tibble: 8,036,575 × 20\n    year month   day dep_delay carrier flight tailnum origin dest   hour  temp\n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <int> <dbl>\n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH       1  39.0\n 2  2013     1     1         2 UA        1545 N14228  EWR    IAH       2  39.0\n 3  2013     1     1         2 UA        1545 N14228  EWR    IAH       3  39.0\n 4  2013     1     1         2 UA        1545 N14228  EWR    IAH       4  39.9\n 5  2013     1     1         2 UA        1545 N14228  EWR    IAH       5  39.0\n 6  2013     1     1         2 UA        1545 N14228  EWR    IAH       6  37.9\n 7  2013     1     1         2 UA        1545 N14228  EWR    IAH       7  39.0\n 8  2013     1     1         2 UA        1545 N14228  EWR    IAH       8  39.9\n 9  2013     1     1         2 UA        1545 N14228  EWR    IAH       9  39.9\n10  2013     1     1         2 UA        1545 N14228  EWR    IAH      10  41  \n# … with 8,036,565 more rows, and 9 more variables: dewp <dbl>, humid <dbl>,\n#   wind_dir <dbl>, wind_speed <dbl>, wind_gust <dbl>, precip <dbl>,\n#   pressure <dbl>, visib <dbl>, time_hour <dttm>\nleft_join(flights_mini, weather, by = c(\"month\", \"day\", \"origin\"))# A tibble: 8,036,575 × 21\n   year.x month   day dep_delay carrier flight tailnum origin dest  year.y  hour\n    <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>  <int> <int>\n 1   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     1\n 2   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     2\n 3   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     3\n 4   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     4\n 5   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     5\n 6   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     6\n 7   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     7\n 8   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     8\n 9   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013     9\n10   2013     1     1         2 UA        1545 N14228  EWR    IAH     2013    10\n# … with 8,036,565 more rows, and 10 more variables: temp <dbl>, dewp <dbl>,\n#   humid <dbl>, wind_dir <dbl>, wind_speed <dbl>, wind_gust <dbl>,\n#   precip <dbl>, pressure <dbl>, visib <dbl>, time_hour <dttm>"},{"path":"joining-related-data.html","id":"key-variable-with-different-names","chapter":"8 Joining Related Data","heading":"8.5.2.3 > key variable with different names","text":"can also match key different name related tables\n(although values ). variable “faa” airports equivalent\nflights_mini’s “dest” variable. three ways getting result.","code":"\n## matching key name in the `by`\nleft_join(flights_mini, airports, by = c(\"dest\" = \"faa\"))# A tibble: 336,776 × 16\n    year month   day dep_delay carrier flight tailnum origin dest  name      lat\n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <chr>   <dbl>\n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH   George…  30.0\n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH   George…  30.0\n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA   Miami …  25.8\n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN   <NA>     NA  \n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL   Hartsf…  33.6\n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD   Chicag…  42.0\n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL   Fort L…  26.1\n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD   Washin…  38.9\n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO   Orland…  28.4\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD   Chicag…  42.0\n# … with 336,766 more rows, and 5 more variables: lon <dbl>, alt <dbl>,\n#   tz <dbl>, dst <chr>, tzone <chr>\n## renaming key in a select\nleft_join(flights_mini, airports %>% rename(dest = faa), by = \"dest\")# A tibble: 336,776 × 16\n    year month   day dep_delay carrier flight tailnum origin dest  name      lat\n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <chr>   <dbl>\n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH   George…  30.0\n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH   George…  30.0\n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA   Miami …  25.8\n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN   <NA>     NA  \n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL   Hartsf…  33.6\n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD   Chicag…  42.0\n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL   Fort L…  26.1\n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD   Washin…  38.9\n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO   Orland…  28.4\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD   Chicag…  42.0\n# … with 336,766 more rows, and 5 more variables: lon <dbl>, alt <dbl>,\n#   tz <dbl>, dst <chr>, tzone <chr>\n## syntax with pipe operator\nflights_mini %>% left_join(airports %>% rename(dest = faa))Joining, by = \"dest\"# A tibble: 336,776 × 16\n    year month   day dep_delay carrier flight tailnum origin dest  name      lat\n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr> <chr>   <dbl>\n 1  2013     1     1         2 UA        1545 N14228  EWR    IAH   George…  30.0\n 2  2013     1     1         4 UA        1714 N24211  LGA    IAH   George…  30.0\n 3  2013     1     1         2 AA        1141 N619AA  JFK    MIA   Miami …  25.8\n 4  2013     1     1        -1 B6         725 N804JB  JFK    BQN   <NA>     NA  \n 5  2013     1     1        -6 DL         461 N668DN  LGA    ATL   Hartsf…  33.6\n 6  2013     1     1        -4 UA        1696 N39463  EWR    ORD   Chicag…  42.0\n 7  2013     1     1        -5 B6         507 N516JB  EWR    FLL   Fort L…  26.1\n 8  2013     1     1        -3 EV        5708 N829AS  LGA    IAD   Washin…  38.9\n 9  2013     1     1        -3 B6          79 N593JB  JFK    MCO   Orland…  28.4\n10  2013     1     1        -2 AA         301 N3ALAA  LGA    ORD   Chicag…  42.0\n# … with 336,766 more rows, and 5 more variables: lon <dbl>, alt <dbl>,\n#   tz <dbl>, dst <chr>, tzone <chr>"},{"path":"joining-related-data.html","id":"other-mutating-joins","chapter":"8 Joining Related Data","heading":"8.6 Other mutating joins","text":"working left joins far. idea exactly \nfull, right inner joins.full_join(x, y, ) - everything!full_join(x, y, ) - everything!right_join(x, y, ) - equivalent left_join(y, x, ), columns rows ordered differentlyright_join(x, y, ) - equivalent left_join(y, x, ), columns rows ordered differentlyinner_join(x, y, ) - rows found bothinner_join(x, y, ) - rows found bothThe difference end .Let’s create two small datasets compare results types joins.\ntables ID column – key – one variable.","code":"\ntbl1 <- tibble(ID = c(\"ID_1\", \"ID_2\", \"ID_3\", \"ID_4\", \"ID_5\", \"ID_6\"),\n              activity1 = c(\"cycling\", \"basketball\", \"kung fu\", \"reading\", \"running\", \"skating\"))\ntbl2 <- tibble(ID = c(\"ID_2\", \"ID_4\", \"ID_6\", \"ID_8\"), \n              place2 = c(\"outside court\", \"library\", \"rec center\", \"pool\"))\n\ntbl1# A tibble: 6 × 2\n  ID    activity1 \n  <chr> <chr>     \n1 ID_1  cycling   \n2 ID_2  basketball\n3 ID_3  kung fu   \n4 ID_4  reading   \n5 ID_5  running   \n6 ID_6  skating   \ntbl2# A tibble: 4 × 2\n  ID    place2       \n  <chr> <chr>        \n1 ID_2  outside court\n2 ID_4  library      \n3 ID_6  rec center   \n4 ID_8  pool         \nleft_join(tbl1, tbl2, by = \"ID\")# A tibble: 6 × 3\n  ID    activity1  place2       \n  <chr> <chr>      <chr>        \n1 ID_1  cycling    <NA>         \n2 ID_2  basketball outside court\n3 ID_3  kung fu    <NA>         \n4 ID_4  reading    library      \n5 ID_5  running    <NA>         \n6 ID_6  skating    rec center   \nright_join(tbl2, tbl1, by = \"ID\")# A tibble: 6 × 3\n  ID    place2        activity1 \n  <chr> <chr>         <chr>     \n1 ID_2  outside court basketball\n2 ID_4  library       reading   \n3 ID_6  rec center    skating   \n4 ID_1  <NA>          cycling   \n5 ID_3  <NA>          kung fu   \n6 ID_5  <NA>          running   \nright_join(tbl1, tbl2, by = \"ID\")# A tibble: 4 × 3\n  ID    activity1  place2       \n  <chr> <chr>      <chr>        \n1 ID_2  basketball outside court\n2 ID_4  reading    library      \n3 ID_6  skating    rec center   \n4 ID_8  <NA>       pool         \nfull_join(tbl1, tbl2, by = \"ID\")# A tibble: 7 × 3\n  ID    activity1  place2       \n  <chr> <chr>      <chr>        \n1 ID_1  cycling    <NA>         \n2 ID_2  basketball outside court\n3 ID_3  kung fu    <NA>         \n4 ID_4  reading    library      \n5 ID_5  running    <NA>         \n6 ID_6  skating    rec center   \n7 ID_8  <NA>       pool         \ninner_join(tbl1, tbl2, by = \"ID\")# A tibble: 3 × 3\n  ID    activity1  place2       \n  <chr> <chr>      <chr>        \n1 ID_2  basketball outside court\n2 ID_4  reading    library      \n3 ID_6  skating    rec center   "},{"path":"joining-related-data.html","id":"challenge-2-5-minutes-2","chapter":"8 Joining Related Data","heading":"8.6.1 Challenge 2 (5 minutes)","text":"many flights occurred temperature fell freezing?Hint: use group_by() summarize() functions learned dplyr lesson.","code":"\n## first, find the days where the temperature fell below 32 F (freezing)\nfreezing <- weather %>%\n  group_by(month, day) %>%\n  summarize(mean_temp = mean(temp, na.rm = TRUE), .groups = \"drop\") %>%\n  filter(mean_temp < 32)\n\n## inner join to get only days with freezing temperature\nflights_mini %>% inner_join(freezing, by = c(\"month\", \"day\")) ## number of rows# A tibble: 29,116 × 10\n   year month   day dep_delay carrier flight tailnum origin dest  mean_temp\n  <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>     <dbl>\n1  2013     1     2        43 B6         707 N580JB  JFK    SJU        28.7\n2  2013     1     2       156 B6          22 N636JB  JFK    SYR        28.7\n3  2013     1     2        -2 US        1030 N162UW  EWR    CLT        28.7\n4  2013     1     2        -3 UA        1453 N76515  EWR    IAH        28.7\n5  2013     1     2        -5 AA        1141 N621AA  JFK    MIA        28.7\n6  2013     1     2         7 UA         407 N493UA  LGA    IAH        28.7\n7  2013     1     2        -6 B6         725 N624JB  JFK    BQN        28.7\n8  2013     1     2        -6 B6         125 N637JB  JFK    FLL        28.7\n9  2013     1     2        -6 B6          49 N658JB  JFK    PBI        28.7\n10  2013     1     2        -6 B6         371 N805JB  LGA    FLL        28.7\n# … with 29,106 more rows\nflights_mini %>% inner_join(freezing) %>% tally()             ## or, get the numberJoining, by = c(\"month\", \"day\")# A tibble: 1 × 1\n     n\n <int>\n1 29116"},{"path":"joining-related-data.html","id":"filtering-joins","chapter":"8 Joining Related Data","heading":"8.7 Filtering joins","text":"Challenge 2, done semi join instead inner join. ,\nessentially filtering ‘flights_mini’ dataset get flights\noccurred days average temperature 32F. didn’t\nanything actual temperature drop observations; therefore,\ndidn’t actually need ‘mean_temp’ variable.happens filtering joins: observations one table \nfiltered based whether match observation table,\ninformation brought table. Specifically, semi joins\nreturn rows x match y, anti joins return rows x\nwithout match y. Note, syntax filtering joins :\nxxx_join(x, y, = \"key_variable\").","code":"\nflights_mini %>% semi_join(freezing, by = c(\"month\", \"day\"))# A tibble: 29,116 × 9\n    year month   day dep_delay carrier flight tailnum origin dest \n   <int> <int> <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>\n 1  2013     1     2        43 B6         707 N580JB  JFK    SJU  \n 2  2013     1     2       156 B6          22 N636JB  JFK    SYR  \n 3  2013     1     2        -2 US        1030 N162UW  EWR    CLT  \n 4  2013     1     2        -3 UA        1453 N76515  EWR    IAH  \n 5  2013     1     2        -5 AA        1141 N621AA  JFK    MIA  \n 6  2013     1     2         7 UA         407 N493UA  LGA    IAH  \n 7  2013     1     2        -6 B6         725 N624JB  JFK    BQN  \n 8  2013     1     2        -6 B6         125 N637JB  JFK    FLL  \n 9  2013     1     2        -6 B6          49 N658JB  JFK    PBI  \n10  2013     1     2        -6 B6         371 N805JB  LGA    FLL  \n# … with 29,106 more rows"},{"path":"joining-related-data.html","id":"other-great-resources-2","chapter":"8 Joining Related Data","heading":"8.8 Other great resources","text":"Holly Emblem blog JoinsTwo-Table Verbsnycflights13 Datasets","code":""},{"path":"subsetting-data-frames.html","id":"subsetting-data-frames","chapter":"9 Subsetting Data Frames","heading":"9 Subsetting Data Frames","text":"Earlier course, saw basics manipulating data frames gapminder data;\nnow let’s add skills learn subset data frames using row column positions. Let’s read \ngapminder dataset downloaded previously assign data frame called gapminder:","code":"\n library(readr)\n gapminder <- read_csv(\"data/gapminder_data.csv\")Rows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, pop, lifeExp, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"subsetting-data-frames.html","id":"basic-subsetting","chapter":"9 Subsetting Data Frames","heading":"9.1 Basic subsetting","text":"Data frames two dimensions - rows columns. can access using \nspecific notation square brackets.","code":"\nmy_data_frame[rows, columns]"},{"path":"subsetting-data-frames.html","id":"selecting-rows","chapter":"9 Subsetting Data Frames","heading":"9.1.1 Selecting rows","text":"can select rows using square brackets like :","code":"\ngapminder[1, ]# A tibble: 1 × 6\n  country      year     pop continent lifeExp gdpPercap\n  <chr>       <dbl>   <dbl> <chr>       <dbl>     <dbl>\n1 Afghanistan  1952 8425333 Asia         28.8      779.\ngapminder[100:110, ]# A tibble: 11 × 6\n   country     year       pop continent lifeExp gdpPercap\n   <chr>      <dbl>     <dbl> <chr>       <dbl>     <dbl>\n 1 Bangladesh  1967  62821884 Asia         43.5      721.\n 2 Bangladesh  1972  70759295 Asia         45.3      630.\n 3 Bangladesh  1977  80428306 Asia         46.9      660.\n 4 Bangladesh  1982  93074406 Asia         50.0      677.\n 5 Bangladesh  1987 103764241 Asia         52.8      752.\n 6 Bangladesh  1992 113704579 Asia         56.0      838.\n 7 Bangladesh  1997 123315288 Asia         59.4      973.\n 8 Bangladesh  2002 135656790 Asia         62.0     1136.\n 9 Bangladesh  2007 150448339 Asia         64.1     1391.\n10 Belgium     1952   8730405 Europe       68       8343.\n11 Belgium     1957   8989111 Europe       69.2     9715.\ngapminder[c(1, 3, 5, 7, 9), ]# A tibble: 5 × 6\n  country      year      pop continent lifeExp gdpPercap\n  <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n1 Afghanistan  1952  8425333 Asia         28.8      779.\n2 Afghanistan  1962 10267083 Asia         32.0      853.\n3 Afghanistan  1972 13079460 Asia         36.1      740.\n4 Afghanistan  1982 12881816 Asia         39.9      978.\n5 Afghanistan  1992 16317921 Asia         41.7      649."},{"path":"subsetting-data-frames.html","id":"challenge-2-5-minutes-3","chapter":"9 Subsetting Data Frames","heading":"9.1.2 Challenge 2 (5 minutes)","text":"’s good practice also check last lines data middle. ?Use knowledge dataset choose rows middle end.\ncheck last lines ’s relatively simple R already function :Searching ones specifically middle isn’t hard simply ask lines random. code ?Tip: several ways achieve .\nsolution presents one form using nested functions, .e. function passed argument another function. might sound like new ept, already using !Remember my_dataframe[rows, cols] print screen data frame number rows columns asked (although might d range named columns example). get last row don’t know many rows data frame ? R function . getting (pseudorandom) sample? R also function .’s unlikely ’ll select rows directly though, ’ll usually want\nuse criteria. Say just wanted rows Asia:works subsetting can take either numerical positions like showed\n, vector TRUE FALSE, returning rows TRUE.\ngapminder$contintent == \"Asia\" generates vector TRUE FALSE\nvalues:inserting vector first position square brackets\ngives us just rows contintent column \"Asia\".Another useful operator context %% operator - can\ntell value one set values:Say wanted select just Canada Mexico:Now can insert first position square brackets:saw previously can select single column using dollar sign $:wanted select subset columns, can specify second\nposition using character vector column names:","code":"\nnrow(gapminder)[1] 1704\ngapminder[c(700, 750, 800),]# A tibble: 3 × 6\n country  year       pop continent lifeExp gdpPercap\n <chr>   <dbl>     <dbl> <chr>       <dbl>     <dbl>\n1 India    1967 506000000 Asia         47.2      701.\n2 Ireland  1977   3271900 Europe       72.0    11151.\n3 Japan    1987 122091325 Asia         78.7    22376.\ngapminder[1700:1704,]# A tibble: 5 × 6\n country   year      pop continent lifeExp gdpPercap\n <chr>    <dbl>    <dbl> <chr>       <dbl>     <dbl>\n1 Zimbabwe  1987  9216418 Africa       62.4      706.\n2 Zimbabwe  1992 10704340 Africa       60.4      693.\n3 Zimbabwe  1997 11404948 Africa       46.8      792.\n4 Zimbabwe  2002 11926563 Africa       40.0      672.\n5 Zimbabwe  2007 12311143 Africa       43.5      470.\ntail(gapminder)# A tibble: 6 × 6\n country   year      pop continent lifeExp gdpPercap\n <chr>    <dbl>    <dbl> <chr>       <dbl>     <dbl>\n1 Zimbabwe  1982  7636524 Africa       60.4      789.\n2 Zimbabwe  1987  9216418 Africa       62.4      706.\n3 Zimbabwe  1992 10704340 Africa       60.4      693.\n4 Zimbabwe  1997 11404948 Africa       46.8      792.\n5 Zimbabwe  2002 11926563 Africa       40.0      672.\n6 Zimbabwe  2007 12311143 Africa       43.5      470.\ntail(gapminder, n = 15)# A tibble: 15 × 6\n  country   year      pop continent lifeExp gdpPercap\n  <chr>    <dbl>    <dbl> <chr>       <dbl>     <dbl>\n1 Zambia    1997  9417789 Africa       40.2     1071.\n2 Zambia    2002 10595811 Africa       39.2     1072.\n3 Zambia    2007 11746035 Africa       42.4     1271.\n4 Zimbabwe  1952  3080907 Africa       48.5      407.\n5 Zimbabwe  1957  3646340 Africa       50.5      519.\n6 Zimbabwe  1962  4277736 Africa       52.4      527.\n7 Zimbabwe  1967  4995432 Africa       54.0      570.\n8 Zimbabwe  1972  5861135 Africa       55.6      799.\n9 Zimbabwe  1977  6642107 Africa       57.7      686.\n10 Zimbabwe  1982  7636524 Africa       60.4      789.\n11 Zimbabwe  1987  9216418 Africa       62.4      706.\n12 Zimbabwe  1992 10704340 Africa       60.4      693.\n13 Zimbabwe  1997 11404948 Africa       46.8      792.\n14 Zimbabwe  2002 11926563 Africa       40.0      672.\n15 Zimbabwe  2007 12311143 Africa       43.5      470.gapminder[sample(nrow(gapminder), 5), ]\nasia <- gapminder[gapminder$continent == \"Asia\", ]\nasia# A tibble: 396 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Afghanistan  1977 14880372 Asia         38.4      786.\n 7 Afghanistan  1982 12881816 Asia         39.9      978.\n 8 Afghanistan  1987 13867957 Asia         40.8      852.\n 9 Afghanistan  1992 16317921 Asia         41.7      649.\n10 Afghanistan  1997 22227415 Asia         41.8      635.\n# … with 386 more rows\ngapminder$continent == \"Asia\"  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [97]  TRUE  TRUE  TRUE  TRUE\n [ reached getOption(\"max.print\") -- omitted 1604 entries ]\ngapminder$country %in% c(\"Canada\", \"Mexico\")  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE\n [ reached getOption(\"max.print\") -- omitted 1604 entries ]\ncan_mex <- gapminder$country %in% c(\"Canada\", \"Mexico\")\ngapminder[can_mex, ]# A tibble: 24 × 6\n   country  year      pop continent lifeExp gdpPercap\n   <chr>   <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Canada   1952 14785584 Americas     68.8    11367.\n 2 Canada   1957 17010154 Americas     70.0    12490.\n 3 Canada   1962 18985849 Americas     71.3    13462.\n 4 Canada   1967 20819767 Americas     72.1    16077.\n 5 Canada   1972 22284500 Americas     72.9    18971.\n 6 Canada   1977 23796400 Americas     74.2    22091.\n 7 Canada   1982 25201900 Americas     75.8    22899.\n 8 Canada   1987 26549700 Americas     76.9    26627.\n 9 Canada   1992 28523502 Americas     78.0    26343.\n10 Canada   1997 30305843 Americas     78.6    28955.\n# … with 14 more rows\ngapminder$country  [1] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\"\n  [6] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\"\n [11] \"Afghanistan\" \"Afghanistan\" \"Albania\"     \"Albania\"     \"Albania\"    \n [16] \"Albania\"     \"Albania\"     \"Albania\"     \"Albania\"     \"Albania\"    \n [21] \"Albania\"     \"Albania\"     \"Albania\"     \"Albania\"     \"Algeria\"    \n [26] \"Algeria\"     \"Algeria\"     \"Algeria\"     \"Algeria\"     \"Algeria\"    \n [31] \"Algeria\"     \"Algeria\"     \"Algeria\"     \"Algeria\"     \"Algeria\"    \n [36] \"Algeria\"     \"Angola\"      \"Angola\"      \"Angola\"      \"Angola\"     \n [41] \"Angola\"      \"Angola\"      \"Angola\"      \"Angola\"      \"Angola\"     \n [46] \"Angola\"      \"Angola\"      \"Angola\"      \"Argentina\"   \"Argentina\"  \n [51] \"Argentina\"   \"Argentina\"   \"Argentina\"   \"Argentina\"   \"Argentina\"  \n [56] \"Argentina\"   \"Argentina\"   \"Argentina\"   \"Argentina\"   \"Argentina\"  \n [61] \"Australia\"   \"Australia\"   \"Australia\"   \"Australia\"   \"Australia\"  \n [66] \"Australia\"   \"Australia\"   \"Australia\"   \"Australia\"   \"Australia\"  \n [71] \"Australia\"   \"Australia\"   \"Austria\"     \"Austria\"     \"Austria\"    \n [76] \"Austria\"     \"Austria\"     \"Austria\"     \"Austria\"     \"Austria\"    \n [81] \"Austria\"     \"Austria\"     \"Austria\"     \"Austria\"     \"Bahrain\"    \n [86] \"Bahrain\"     \"Bahrain\"     \"Bahrain\"     \"Bahrain\"     \"Bahrain\"    \n [91] \"Bahrain\"     \"Bahrain\"     \"Bahrain\"     \"Bahrain\"     \"Bahrain\"    \n [96] \"Bahrain\"     \"Bangladesh\"  \"Bangladesh\"  \"Bangladesh\"  \"Bangladesh\" \n [ reached getOption(\"max.print\") -- omitted 1604 entries ]\ngapminder[ , c(\"country\", \"year\", \"lifeExp\")]# A tibble: 1,704 × 3\n   country      year lifeExp\n   <chr>       <dbl>   <dbl>\n 1 Afghanistan  1952    28.8\n 2 Afghanistan  1957    30.3\n 3 Afghanistan  1962    32.0\n 4 Afghanistan  1967    34.0\n 5 Afghanistan  1972    36.1\n 6 Afghanistan  1977    38.4\n 7 Afghanistan  1982    39.9\n 8 Afghanistan  1987    40.8\n 9 Afghanistan  1992    41.7\n10 Afghanistan  1997    41.8\n# … with 1,694 more rows"},{"path":"subsetting-data-frames.html","id":"challenge-3-5-minutes-2","chapter":"9 Subsetting Data Frames","heading":"9.1.3 Challenge 3 (5 minutes)","text":"Select rows gapminder data 1975 earlier","code":"\ngapminder[gapminder$year <= 1975, ]# A tibble: 710 × 6\n   country      year      pop continent lifeExp gdpPercap\n   <chr>       <dbl>    <dbl> <chr>       <dbl>     <dbl>\n 1 Afghanistan  1952  8425333 Asia         28.8      779.\n 2 Afghanistan  1957  9240934 Asia         30.3      821.\n 3 Afghanistan  1962 10267083 Asia         32.0      853.\n 4 Afghanistan  1967 11537966 Asia         34.0      836.\n 5 Afghanistan  1972 13079460 Asia         36.1      740.\n 6 Albania      1952  1282697 Europe       55.2     1601.\n 7 Albania      1957  1476505 Europe       59.3     1942.\n 8 Albania      1962  1728137 Europe       64.8     2313.\n 9 Albania      1967  1984060 Europe       66.2     2760.\n10 Albania      1972  2263554 Europe       67.7     3313.\n# … with 700 more rows"},{"path":"subsetting-data-frames.html","id":"challenge-4-5-minutes","chapter":"9 Subsetting Data Frames","heading":"9.1.4 Challenge 4 (5 minutes)","text":"Select rows gapminder data Canada, just columns\nyear, pop, gdpPercap","code":"\ngapminder[gapminder$country == \"Canada\", c(\"year\", \"pop\", \"gdpPercap\")]# A tibble: 12 × 3\n    year      pop gdpPercap\n   <dbl>    <dbl>     <dbl>\n 1  1952 14785584    11367.\n 2  1957 17010154    12490.\n 3  1962 18985849    13462.\n 4  1967 20819767    16077.\n 5  1972 22284500    18971.\n 6  1977 23796400    22091.\n 7  1982 25201900    22899.\n 8  1987 26549700    26627.\n 9  1992 28523502    26343.\n10  1997 30305843    28955.\n11  2002 31902268    33329.\n12  2007 33390141    36319."},{"path":"introduction-to-the-bcdata-package.html","id":"introduction-to-the-bcdata-package","chapter":"10 Introduction to the bcdata package","heading":"10 Introduction to the bcdata package","text":"British Columbia government hosts 2000 tabular geospatial data sets\nB.C. Data Catalogue. data available B.C. Data\nCatalogue open licence. bcdata package provides programming\ninterfaces B.C. Data Catalogue. allows R users search, download \nimport metadata data B.C. Data Catalogue R session.\nfunctionality bcdata package connects British Columbia\ngovernment public data holdings B.C. Data Catalogue vast\ncapabilities R.","code":""},{"path":"introduction-to-the-bcdata-package.html","id":"getting-started-3","chapter":"10 Introduction to the bcdata package","heading":"10.1 Getting started","text":"First need install bcdata package:next need load bcdata package, along dplyr ggplot2 installed used earlier lessons:","code":"\ninstall.packages(\"bcdata\")\nlibrary(bcdata)\nlibrary(dplyr)\nlibrary(ggplot2)"},{"path":"introduction-to-the-bcdata-package.html","id":"searching-the-b.c.-data-catalogue","chapter":"10 Introduction to the bcdata package","heading":"10.2 Searching the B.C. Data Catalogue","text":"Let’s use bcdata package search B.C. Data Catalogue data public libraries British Columbia:many catalogue records data relating libraries. Let’s examine first returned record closely:","code":"\nbcdc_search(\"public libraries\", n = 5)Found 18 matches. Returning the first 5.\nTo see them all, rerun the search and set the 'n' argument to 18.List of B.C. Data Catalogue Records\nNumber of records: 5\nTitles:\n1: BC Public Libraries Statistics 2002-Present (xls, xlsx, csv)\n ID: d03007d6-d6c7-44d7-b2f8-710ba9433617\n Name: bc-public-libraries-statistics-2002-present\n2: BC Public Libraries Systems - Branches and Locations (multiple, csv,\n xlsx, kml, wms)\n ID: 3d2318d4-8f5d-4208-88f5-995420d7c58f\n Name: bc-public-libraries-systems-branches-and-locations\n3: BC Web Map Library (kml, wms)\n ID: 6164a2af-d3ac-4e92-8dbe-51a93bb5e24b\n Name: bc-web-map-library\n4: Environmental Protection Information Resources e-Library (other)\n ID: dae0f2c3-b4f4-4d16-a96d-d7fe7c1581f3\n Name: environmental-protection-information-resources-e-library\n5: Biodiversity/Environmental Information Resources e-Library (html)\n ID: a77d4986-91a1-42fc-8e5c-51a304c7975e\n Name: biodiversity-environmental-information-resources-e-library\n\nAccess a single record by calling `bcdc_get_record(ID)` with the ID\n from the desired record.\nbcdc_get_record(\"bc-public-libraries-systems-branches-and-locations\")Warning: It is advised to use the permanent id ('3d2318d4-8f5d-4208-88f5-995420d7c58f') rather than the name of the record ('bc-public-libraries-systems-branches-and-locations') to guard against future name changes.B.C. Data Catalogue Record: BC Public Libraries Systems - Branches and\n Locations\nName: bc-public-libraries-systems-branches-and-locations (ID:\n 3d2318d4-8f5d-4208-88f5-995420d7c58f)\nPermalink:\n https://catalogue.data.gov.bc.ca/dataset/3d2318d4-8f5d-4208-88f5-995420d7c58f\nLicence: Open Government Licence - British Columbia\nDescription: This dataset includes contact and location data for all\n library service points in BC. It also includes some primary data on\n library use and services from the most current year that data is\n available. \n The dataset is geolocational, and is available in XLSX,\n CSV, and KML formats.\nAvailable Resources (5):\n 1. BC Public Library Service Points (csv)\n 2. 2018 BC Public Library Systems - Locations and Branch Data (XLS) - v19 (xlsx)\n 3. 2018 BC Public Library Systems - Locations and Branch Data (CSV) - v19 (csv)\n 4. 2015 BC Public Library Systems - Locations and Branch Data 1.2 (KML) (kml)\n 5. WMS getCapabilities request (wms)\nAccess the full 'Resources' data frame using:\n bcdc_tidy_resources('3d2318d4-8f5d-4208-88f5-995420d7c58f')\nQuery and filter this data using:\n bcdc_query_geodata('3d2318d4-8f5d-4208-88f5-995420d7c58f')"},{"path":"introduction-to-the-bcdata-package.html","id":"importing-data-from-the-b.c.-data-catalogue","chapter":"10 Introduction to the bcdata package","heading":"10.3 Importing data from the B.C. Data Catalogue","text":"Next, can use bcdc_get_data() function import data directly R:bc-public-libraries-systems-branches--locations catalogue record\ncontains multiple data resources files. run code\ninteractively, R prompt console select one available\nresources, know one want download. full code \nimport resource record—using record’s permanent id \nguard future name changes—provided user next time:","code":"\nbcdc_get_data(record = \"bc-public-libraries-systems-branches-and-locations\")\nlib_raw <- bcdc_get_data(record = '3d2318d4-8f5d-4208-88f5-995420d7c58f',\n                         resource = 'ed17f111-fb39-46b3-89aa-5375592fbb01')Reading the data using the read_xlsx function from the readxl package."},{"path":"introduction-to-the-bcdata-package.html","id":"challenge-1-5-minutes-5","chapter":"10 Introduction to the bcdata package","heading":"10.3.1 Challenge 1 (5 minutes)","text":"Take minutes search B.C. Data Catalogue data sets different topic. Identify import one tabular data set R session (e.g. CSV XLS resource). Entering bcdc_browse() R console open catalogue page default web browser.","code":""},{"path":"introduction-to-the-bcdata-package.html","id":"practice-manipulating-data-with-dplyr","chapter":"10 Introduction to the bcdata package","heading":"10.4 Practice manipulating data with dplyr","text":"Let’s return libraries data frame lib_raw imported. learned\nearlier workshop, useful first step get familiar data:Let’s tidy data frame find many books—physical\nmaterials volumes—available 51 53 degrees Latitude. Remember\npreviously used select() return columns wanted. \nalso using select() rename 460x Total branch physical materials, volumes held\nnum_books:","code":"\nstr(lib_raw)tibble [253 × 38] (S3: tbl_df/tbl/data.frame)\n $ Library System                                               : chr [1:253] \"Alert Bay Public Library & Museum\" \"Beaver Valley Public Library\" \"Bowen Island Public Library\" \"Burnaby Public Library\" ...\n $ Location                                                     : chr [1:253] \"Alert Bay Public Library & Museum\" \"Beaver Valley Public Library\" \"Bowen Island Public Library\" \"Bob Prittie Metrotown Branch\" ...\n $ 1x Branch Unique ID                                          : chr [1:253] \"BABM001\" \"BFBV001\" \"BBI001\" \"BB001\" ...\n $ School District Served                                       : chr [1:253] \"85\" \"20\" \"45\" \"41\" ...\n $ Phone                                                        : chr [1:253] \"(250) 974-5721\" \"(250) 367-7114\" \"(604) 947-9788\" \"(604) 436-5427\" ...\n $ Physical Address                                             : chr [1:253] \"116 Fir Street\" \"1847 - 1st Street\" \"430 Bowen Island Trunk\" \"6100 Willingdon Avenue\" ...\n $ City                                                         : chr [1:253] \"Alert Bay\" \"Fruitvale\" \"Bowen Island\" \"Burnaby\" ...\n $ Province                                                     : chr [1:253] \"BC\" \"BC\" \"BC\" \"BC\" ...\n $ Postal Code                                                  : chr [1:253] \"V0N 1A0\" \"V0G 1L0\" \"V0N 1G0\" \"V5H 4N5\" ...\n $ Latitude                                                     : num [1:253] 50.6 49.1 49.4 49.2 49.3 ...\n $ Longitude                                                    : num [1:253] -127 -118 -123 -123 -123 ...\n $ 460x Total branch physical materials, volumes held           : num [1:253] 9361 25477 15100 373232 59958 ...\n $ 556x Branch circulation of print and other physical materials: num [1:253] 2460 19792 36155 1139184 454254 ...\n $ 565x Branch circulation of children's materials              : chr [1:253] \"193\" \"4737\" \"15964\" \"476345\" ...\n $ 610x Branch reference transactions                           : chr [1:253] \"1700\" \"10000\" \"8217\" \"107784\" ...\n $ 775x In person visits to this branch or service point        : chr [1:253] \"3522\" \"14750\" \"52690\" \"749695\" ...\n $ 680x Branch in-library adult programs                        : chr [1:253] \"0\" \"8\" \"499\" \"58\" ...\n $ 682x Branch outreach adult programs                          : chr [1:253] \"1\" \"2\" \"0\" \"101\" ...\n $ 690x Attendance at adult programs                            : chr [1:253] \"22\" \"202\" \"1381\" \"3865\" ...\n $ 700x Branch in-library children's programs                   : chr [1:253] \"0\" \"100\" \"94\" \"402\" ...\n $ 702x Branch outreach children's programs                     : chr [1:253] \"3\" \"10\" \"5\" \"39\" ...\n $ 710x Attendance at children's programs                       : chr [1:253] \"235\" \"1208\" \"1224\" \"19522\" ...\n $ 715x Branch in-library young adult programs                  : chr [1:253] \"0\" \"0\" \"0\" \"12\" ...\n $ 717x Branch outreach young adult programs                    : chr [1:253] \"0\" \"0\" \"0\" \"84\" ...\n $ 716x Attendance at young adult programs                      : chr [1:253] \"0\" \"0\" \"0\" \"2923\" ...\n $ 671x Branch in-library newcomer/ELL programs, all ages       : chr [1:253] \"0\" \"0\" \"0\" \"26\" ...\n $ 673x Branch outreach newcomer/ELL programs, all ages         : chr [1:253] \"0\" \"0\" \"0\" \"0\" ...\n $ 672x Attendance at branch newcomer/ELL programs              : chr [1:253] \"0\" \"0\" \"0\" \"528\" ...\n $ 740x Professional Librarians, hours worked at this branch    : chr [1:253] \"0\" \"0\" \"1820\" \"42224\" ...\n $ 742x Library Technicians, hours worked at this branch        : chr [1:253] \"0\" \"0\" \"0\" \"1733\" ...\n $ 752x Community Librarians, hours worked at this branch       : chr [1:253] \"622\" \"4940\" \"0\" NA ...\n $ 770x Other Staff, hours worked at this branch                : chr [1:253] \"281\" \"1350\" \"4107\" \"104199\" ...\n $ 975x Number of photocopiers in library branch                : num [1:253] 1 1 1 4 1 1 1 2 1 1 ...\n $ 852x Is this location LEED certified?                        : chr [1:253] NA \"No\" \"No\" \"No\" ...\n $ 854x Is this location a Shared Space facility?               : chr [1:253] NA \"No\" \"Yes\" \"No\" ...\n $ 860x Branch space/size, total square metres                  : num [1:253] 213 270 407 5673 465 ...\n $ 890x Hours open per year at this location                    : chr [1:253] \"618\" \"2320\" \"1953\" \"3612\" ...\n $ 920x Days open per year at this location                     : chr [1:253] \"191\" \"321\" \"303\" \"339\" ...\nnames(lib_raw) [1] \"Library System\"                                               \n [2] \"Location\"                                                     \n [3] \"1x Branch Unique ID\"                                          \n [4] \"School District Served\"                                       \n [5] \"Phone\"                                                        \n [6] \"Physical Address\"                                             \n [7] \"City\"                                                         \n [8] \"Province\"                                                     \n [9] \"Postal Code\"                                                  \n[10] \"Latitude\"                                                     \n[11] \"Longitude\"                                                    \n[12] \"460x Total branch physical materials, volumes held\"           \n[13] \"556x Branch circulation of print and other physical materials\"\n[14] \"565x Branch circulation of children's materials\"              \n[15] \"610x Branch reference transactions\"                           \n[16] \"775x In person visits to this branch or service point\"        \n[17] \"680x Branch in-library adult programs\"                        \n[18] \"682x Branch outreach adult programs\"                          \n[19] \"690x Attendance at adult programs\"                            \n[20] \"700x Branch in-library children's programs\"                   \n[21] \"702x Branch outreach children's programs\"                     \n[22] \"710x Attendance at children's programs\"                       \n[23] \"715x Branch in-library young adult programs\"                  \n[24] \"717x Branch outreach young adult programs\"                    \n[25] \"716x Attendance at young adult programs\"                      \n[26] \"671x Branch in-library newcomer/ELL programs, all ages\"       \n[27] \"673x Branch outreach newcomer/ELL programs, all ages\"         \n[28] \"672x Attendance at branch newcomer/ELL programs\"              \n[29] \"740x Professional Librarians, hours worked at this branch\"    \n[30] \"742x Library Technicians, hours worked at this branch\"        \n[31] \"752x Community Librarians, hours worked at this branch\"       \n[32] \"770x Other Staff, hours worked at this branch\"                \n[33] \"975x Number of photocopiers in library branch\"                \n[34] \"852x Is this location LEED certified?\"                        \n[35] \"854x Is this location a Shared Space facility?\"               \n[36] \"860x Branch space/size, total square metres\"                  \n[37] \"890x Hours open per year at this location\"                    \n[38] \"920x Days open per year at this location\"                     \nlibrary(dplyr)\n\nlib_tidy <- lib_raw %>%\n  filter(Latitude <= 53, Latitude >= 51) %>% \n  select(`Library System`, Location, City, num_books = `460x Total branch physical materials, volumes held`)\n\n\nsum_books <- lib_tidy %>% \n  group_by(City, `Library System`) %>% \n  summarize(total_books = sum(num_books))`summarise()` has grouped output by 'City'. You can override using the\n`.groups` argument."},{"path":"introduction-to-the-bcdata-package.html","id":"challenge-2-10-minutes-3","chapter":"10 Introduction to the bcdata package","heading":"10.4.1 Challenge 2 (10 minutes)","text":"Using dplyr, determine total number books within Library System 51 53 degrees latitude British Columbia.","code":"\nsum_books %>% \n group_by(`Library System`) %>% \n summarize(totals = sum(total_books))# A tibble: 5 × 2\n `Library System`                         totals\n <chr>                                     <dbl>\n1 Cariboo Regional District Library System 245906\n2 Okanagan Regional Library District         2350\n3 Thompson Nicola Regional Library          49871\n4 Valemount Public Library                   6994\n5 Vancouver Island Regional Library           879"},{"path":"introduction-to-the-bcdata-package.html","id":"practice-plotting-data-with-ggplot2","chapter":"10 Introduction to the bcdata package","heading":"10.5 Practice plotting data with ggplot2","text":"Now imported, tidied, summarized library data, let’s make static data visualization share communicate results others.","code":"\nlibrary(ggplot2)\n\nsum_books %>% \n  ggplot(aes(x = total_books, y = City)) +\n  geom_col()"},{"path":"introduction-to-the-bcdata-package.html","id":"challenge-3-10-minutes-2","chapter":"10 Introduction to the bcdata package","heading":"10.5.1 Challenge 3 (10 minutes)","text":"Iterate plot include information number books Library Service. Add title plot. Try design changes make plot readable.","code":"\nlibrary(ggplot2)\n\nsum_books %>% \n ggplot(aes(x = total_books, y = City, fill = `Library System`)) +\n geom_col() +\n theme_minimal() +\n labs(x = NULL,\n      y = NULL,\n      title = \"Total Number of Books by City & Library System in B.C.\",\n      caption = \"Data sourced from the B.C. Data Catalogue\")"},{"path":"introduction-to-the-bcdata-package.html","id":"importing-data-from-the-b.c.-data-catalogue---another-example","chapter":"10 Introduction to the bcdata package","heading":"10.6 Importing data from the B.C. Data Catalogue - Another Example","text":"Let’s try another example bcdata. time going try importing\ndata bit messier. going work New Apprenticeship\nRegistrations Fiscal Year \nGender\ndata. example require reference elements ’ve learned\nthroughout workshop.can view data record going working browser \nrunning following command:’ve previously learned can use bcdc_get_data() load data B.C. Data Catalogue directly R. Let’s try now:Well doesn’t look right. can see near bottom output \nwords Gender Trade know data also mess <NA>.\nscenario can helpful look raw data. Navigate back \ncatalogue page opened earlier click View button. \ntake \nResource\npage. Click link Resource data open Excel. \nfirst thing notice data actually start 10 rows\n. bcdc_get_data() use read_csv() read csv files function\nconveniently argument called skip allows us specify number\nlines skip reading data. can use bcdc_get_data()\nlike :Ok looking much better. now data rectangular looks\nlike something can work . one thing take\ncare though. notice data filled ... values. missing\nvalues data. R specific way handling missing values need\ntell bcdc_get_data() (via read_csv()) missing values. \nadding another argument R interprets ... missing values:Now ready work data. One thing might notice \ndata wide format. number individuals given Gender \nTrade repeated time across columns column fiscal\nyear. great making nice table less great want make \nplot. reshape data long format, can make use \npivot_longer tidyr package covered tidyr section. want pivot fiscal years\nneed specify columns. addition, want give two new\ncolumns descriptive names:actually quite bit data likely represents number\npossible values Trade. can check number unique values \nTrade column using handy function dplyr called n_distinct():Sure enough 104 ! Similarly, let’s look values Gender column using unique() function learned earlier:simplify things let’s take subset Trades data look Men Women:tidied filtered dataset, now something can plot\nusing skills ’ve learned ggplot2 section. One thing note made\nuse ncol argument facet_wrap() faceted plots \nshare x-axis:Try customizing output different Trade categories different ggplot2 customizations. example strategies might take tidy x-axis?","code":"\nbcdc_browse(\"new-apprenticeship-registrations-by-fiscal-year-and-gender\")\nnew_reg <- bcdc_get_data(record = \"new-apprenticeship-registrations-by-fiscal-year-and-gender\")Reading the data using the read_csv function from the readr package.New names:\nRows: 321 Columns: 12\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(12): Notes:, ...2, ...3, ...4, ...5, ...6, ...7, ...8, ...9, ...10, ......\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n• `` -> `...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...9`\n• `` -> `...10`\n• `` -> `...11`\n• `` -> `...12`\nnew_reg# A tibble: 321 × 12\n   `Notes:`    ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12\n   <chr>       <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n 1 \"The follo… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 2 \"Gender is… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 3 \"Fiscal Ye… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 4 \"Professio… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 5 \"... Repre… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 6  <NA>       <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 7 \"Data as o… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 8 \"Data Sour… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 9  <NA>       <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n10 \"Trade\"     Gend… FY20… FY20… FY20… FY20… FY20… FY20… FY20… FY20… FY20… FY20…\n# … with 311 more rows\nnew_reg <- bcdc_get_data(\n  record = \"new-apprenticeship-registrations-by-fiscal-year-and-gender\", \n  skip = 10\n  )Reading the data using the read_csv function from the readr package.Rows: 311 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): Trade, Gender, FY2012/13, FY2013/14, FY2014/15, FY2015/16, FY2016/...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nnew_reg# A tibble: 311 × 12\n   Trade  Gender FY201…¹ FY201…² FY201…³ FY201…⁴ FY201…⁵ FY201…⁶ FY201…⁷ FY201…⁸\n   <chr>  <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 Aircr… Woman  8       7       9       6       ...     ...     ...     12     \n 2 Aircr… Man    108     73      61      46      ...     ...     ...     63     \n 3 Aircr… Total… 116     80      70      52      69      48      62      75     \n 4 Aircr… Woman  ...     ...     ...     ...     0       ...     ...     ...    \n 5 Aircr… Man    ...     ...     ...     ...     ...     ...     ...     ...    \n 6 Aircr… Total… 27      40      42      24      ...     23      26      17     \n 7 Appli… Woman  0       0       0       ...     ...     ...     0       ...    \n 8 Appli… Man    39      ...     36      ...     ...     ...     11      ...    \n 9 Appli… Total… 39      ...     36      13      32      13      11      23     \n10 Arbor… Woman  ...     0       ...     ...     ...     ...     ...     ...    \n# … with 301 more rows, 2 more variables: `FY2020/21` <chr>, `FY2021/22` <chr>,\n#   and abbreviated variable names ¹​`FY2012/13`, ²​`FY2013/14`, ³​`FY2014/15`,\n#   ⁴​`FY2015/16`, ⁵​`FY2016/17`, ⁶​`FY2017/18`, ⁷​`FY2018/19`, ⁸​`FY2019/20`\nnew_reg <- bcdc_get_data(\n  \"new-apprenticeship-registrations-by-fiscal-year-and-gender\", \n  skip = 10, \n  na = \"...\"\n  )Reading the data using the read_csv function from the readr package.Rows: 311 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Trade, Gender\ndbl (10): FY2012/13, FY2013/14, FY2014/15, FY2015/16, FY2016/17, FY2017/18, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nnew_reg# A tibble: 311 × 12\n   Trade  Gender FY201…¹ FY201…² FY201…³ FY201…⁴ FY201…⁵ FY201…⁶ FY201…⁷ FY201…⁸\n   <chr>  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Aircr… Woman        8       7       9       6      NA      NA      NA      12\n 2 Aircr… Man        108      73      61      46      NA      NA      NA      63\n 3 Aircr… Total…     116      80      70      52      69      48      62      75\n 4 Aircr… Woman       NA      NA      NA      NA       0      NA      NA      NA\n 5 Aircr… Man         NA      NA      NA      NA      NA      NA      NA      NA\n 6 Aircr… Total…      27      40      42      24      NA      23      26      17\n 7 Appli… Woman        0       0       0      NA      NA      NA       0      NA\n 8 Appli… Man         39      NA      36      NA      NA      NA      11      NA\n 9 Appli… Total…      39      NA      36      13      32      13      11      23\n10 Arbor… Woman       NA       0      NA      NA      NA      NA      NA      NA\n# … with 301 more rows, 2 more variables: `FY2020/21` <dbl>, `FY2021/22` <dbl>,\n#   and abbreviated variable names ¹​`FY2012/13`, ²​`FY2013/14`, ³​`FY2014/15`,\n#   ⁴​`FY2015/16`, ⁵​`FY2016/17`, ⁶​`FY2017/18`, ⁷​`FY2018/19`, ⁸​`FY2019/20`\nlibrary(tidyr)\n\nnew_reg_long <- new_reg %>% \n  pivot_longer(\n    cols = `FY2012/13`:`FY2021/22`,\n    names_to = \"fiscal_year\",\n    values_to = \"registrations\"\n  )\nnew_reg_long# A tibble: 3,110 × 4\n   Trade                           Gender fiscal_year registrations\n   <chr>                           <chr>  <chr>               <dbl>\n 1 Aircraft Maintenance Technician Woman  FY2012/13               8\n 2 Aircraft Maintenance Technician Woman  FY2013/14               7\n 3 Aircraft Maintenance Technician Woman  FY2014/15               9\n 4 Aircraft Maintenance Technician Woman  FY2015/16               6\n 5 Aircraft Maintenance Technician Woman  FY2016/17              NA\n 6 Aircraft Maintenance Technician Woman  FY2017/18              NA\n 7 Aircraft Maintenance Technician Woman  FY2018/19              NA\n 8 Aircraft Maintenance Technician Woman  FY2019/20              12\n 9 Aircraft Maintenance Technician Woman  FY2020/21              NA\n10 Aircraft Maintenance Technician Woman  FY2021/22               6\n# … with 3,100 more rows\nn_distinct(new_reg_long$Trade)[1] 104\nunique(new_reg_long$Gender)[1] \"Woman\"                             \"Man\"                              \n[3] \"Total (Woman + Man)\"               \"Non Binary / Prefer not to answer\"\n[5] \"Grand Total\"                      \nnew_reg_long <- new_reg %>% \n  pivot_longer(\n    cols = `FY2012/13`:`FY2021/22`,\n    names_to = \"fiscal_year\",\n    values_to = \"registrations\", \n    values_drop_na = TRUE\n  ) %>% \n  filter(\n    Gender %in% c(\"Man\", \"Woman\"),\n    Trade %in% c(\"Boilermaker\", \"Climbing Arborist\", \"Tilesetter\", \"Landscape Horticulturist\", \"Baker\")\n    )\nlibrary(ggplot2)\n\nggplot(new_reg_long, aes(x = fiscal_year, y = registrations, fill = Trade)) +\n  geom_col() +\n  facet_wrap(vars(Gender), ncol = 1)"},{"path":"introduction-to-the-bcdata-package.html","id":"challenge-4-15-minutes","chapter":"10 Introduction to the bcdata package","heading":"10.6.1 Challenge 4 (15 minutes)","text":"Navigate BC Data Catalogue choose dataset Resource Storage Format csv xlsx. example BC Seafood Production data. can use dataset one choosing. Import data R make plot, plot . Try apply skills ’ve learned workshop make pretty plot.","code":"\nseafood_prod <- bcdc_get_data(\"e591a756-6b99-4986-b8ce-f341bd47228f\",           \"a057bfbb-8121-410b-92bb-29f445a6d1a9\")Reading the data using the read_csv function from the readr package.Rows: 114 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Species Group, Source, Species/Product\ndbl (4): Year, Harvest ('000 t), Landed Value ($ million), Wholesale Value (...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nseafood_by_year <- seafood_prod %>% \n filter(Year == 2020) %>% \n group_by(`Species/Product`) %>% \n summarise(value = sum(`Wholesale Value ($ million)`)) \n\nseafood_by_year %>% \n ggplot(aes(y = `Species/Product`, x = value, fill = `Species/Product`)) +\n geom_col() +\n scale_fill_viridis_d() +\n scale_x_continuous(labels = scales::dollar) +\n guides(fill = \"none\") +\n theme_minimal() +\n labs(title = \"B.C. Seafood Production - 2020\", \n      x = \"Wholesale Value ($ million)\",\n      caption = \"https://catalogue.data.gov.bc.ca/dataset/e591a756-6b99-4986-b8ce-f341bd47228f\") +\n theme(axis.title.y = element_blank())"},{"path":"data-analysis-reports.html","id":"data-analysis-reports","chapter":"11 Data analysis reports","heading":"11 Data analysis reports","text":"Data analysts tend write lot reports, describing \nanalyses results, collaborators document \nwork future reference.Many new users begin first writing single R script containing \nwork. simply share analysis emailing script various graphs\nattachments. can cumbersome, requiring lengthy discussion \nexplain attachment result.Writing formal reports Word LaTeX\ncan simplify incorporating analysis report output graphs\nsingle document. tweaking formatting make figures look correct\nfix obnoxious page breaks can tedious lead lengthly “whack\nmole” game fixing new mistakes resulting single formatting change.Creating web page (html file) using R Markdown makes things easier.\nreport can one long stream, tall figures wouldn’t ordinary fit \none page can kept full size easier read, since reader can simply\nkeep scrolling. Formatting simple easy modify, allowing spend\ntime analyses instead writing reports.","code":""},{"path":"data-analysis-reports.html","id":"literate-programming","chapter":"11 Data analysis reports","heading":"11.1 Literate programming","text":"Ideally, analysis reports reproducible documents: \nerror discovered, additional subjects added \ndata, can just re-compile report get new corrected\nresults (versus reconstruct figures, paste \nWord document, hand-edit various detailed results).key R package knitr. allows \ncreate document mixture text chunks \ncode. document processed knitr, chunks code \nexecuted, graphs results inserted final document.sort idea called “literate programming”.knitr allows mix basically sort text code different programming languages, recommend use R Markdown, mixes Markdown\nR. Markdown light-weight mark-language documents web pages.","code":""},{"path":"data-analysis-reports.html","id":"example-of-using-r-markdown-in-the-bc-government","chapter":"11 Data analysis reports","heading":"11.2 Example of Using R Markdown in the BC Government","text":"R Markdown quite versatile. examples ways can adapt variety purposes.","code":""},{"path":"data-analysis-reports.html","id":"documentation","chapter":"11 Data analysis reports","heading":"11.2.1 Documentation","text":"Rendered: https://bcgov.github.io/bcdata/articles/bcdata.htmlR Markdown: https://github.com/bcgov/bcdata/blob/master/vignettes/bcdata.Rmd","code":""},{"path":"data-analysis-reports.html","id":"teaching","chapter":"11 Data analysis reports","heading":"11.2.2 Teaching","text":"Rendered: https://bcgov.github.io/ds-intro--r-2-day/R Markdown: https://github.com/bcgov/ds-intro--r-2-day/blob/master/01-rstudio-intro.Rmd","code":""},{"path":"data-analysis-reports.html","id":"presentation","chapter":"11 Data analysis reports","heading":"11.2.3 Presentation","text":"Rendered: https://bcgov.github.io/bcgov-rstats-public-presentations/2020-03-26_bcdata_lunch_and_learn/bcdata-2020-lunch--learn.html#1R Markdown: https://github.com/bcgov/bcgov-rstats-public-presentations/blob/master/2020-03-26_bcdata_lunch_and_learn/bcdata-2020-lunch--learn.RmdTake minutes discuss groups typical ways \nshare results. scenario data changes\nanalysis needs ?","code":""},{"path":"data-analysis-reports.html","id":"creating-an-r-markdown-file","chapter":"11 Data analysis reports","heading":"11.3 Creating an R Markdown file","text":"Within RStudio, click File → New File → R Markdown \n’ll get dialog box like :can stick default (HTML output), give title author=.","code":""},{"path":"data-analysis-reports.html","id":"basic-components-of-r-markdown","chapter":"11 Data analysis reports","heading":"11.4 Basic components of R Markdown","text":"initial chunk text (header) contains instructions R specify kind document created, options chosen. can use header give document title, author, date, tell ’re going want\nproduce html output (words, web page).can delete fields don’t want \nincluded. double-quotes aren’t strictly necessary case.\n’re mostly needed want include colon title.RStudio creates document example text get \nstarted. Note chunks likeThese chunks R code executed knitr replaced\nresults. later.Also note web address ’s put angle brackets (< >) \nwell double-asterisks **Knit**. \nMarkdown.","code":"---\ntitle: \"Initial R Markdown document\"\nauthor: \"Luke Skywalker\"\ndate: \"May 7th, 2020\"\noutput: html_document\n---\n```{r}\nsummary(cars)\n```\n"},{"path":"data-analysis-reports.html","id":"markdown","chapter":"11 Data analysis reports","heading":"11.5 Markdown","text":"Markdown system writing web pages marking text much\nemail rather writing html code. marked-\ntext gets converted html, replacing marks proper\nhtml code.now, let’s delete stuff ’s write bit \nmarkdown.make things bold using two asterisks, like : **bold**,\nmake things italics using underscores, like :\n_italics_.can make bulleted list writing list hyphens \nasterisks, like :like :appear :bold double-asterisksitalics underscorescode-type font backticksYou can use whatever method prefer, consistent. maintains \nreadability code.can make numbered list just using numbers. can even use \nnumber want:appear :bold double-asterisksitalics underscorescode-type font backticksYou can make section headers different sizes initiating line\nnumber # symbols:compile R Markdown document html webpage clicking\n“Knit” button upper-left.Create new R Markdown document. Delete R code chunks\nwrite bit Markdown (sections, italicized\ntext, itemized list).Convert document webpage.RStudio, select File > New file > R Markdown…Delete placeholder text add following:click ‘Knit’ button toolbar generate html document (webpage).","code":"* bold with double-asterisks\n* italics with underscores\n* code-type font with backticks- bold with double-asterisks\n- italics with underscores\n- code-type font with backticks1. bold with double-asterisks\n1. italics with underscores\n1. code-type font with backticks# Title\n## Main section\n### Sub-section\n#### Sub-sub section# Introduction\n\n## Background on Data\n\nThis report uses the *gapminder* dataset, which has columns that include:\n\n* country\n* continent\n* year\n* lifeExp\n* pop\n* gdpPercap\n\n## Background on Methods\n"},{"path":"data-analysis-reports.html","id":"a-bit-more-markdown","chapter":"11 Data analysis reports","heading":"11.5.1 A bit more Markdown","text":"can make hyperlink like :\n[text show](http://-web-page.com).can include image file like : ![caption](http://url//file)can subscripts (e.g., F2) F~2~ superscripts (e.g.,\nF2) F^2^.know write equations \nLaTeX, can use $ $ $$ $$ insert math equations, like\n$E = mc^2$ andYou can review Markdown syntax navigating \n“Markdown Quick Reference” “Help” field \ntoolbar top RStudio.","code":"$$y = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon$$"},{"path":"data-analysis-reports.html","id":"r-code-chunks","chapter":"11 Data analysis reports","heading":"11.5.2 R code chunks","text":"real power Markdown comes \nmixing markdown chunks code. R Markdown. \nprocessed, R code executed; produce figures, \nfigures inserted final document.main code chunks look like :, place chunk R code ```{r chunk_name}\n```. give chunk\nunique name, help fix errors , graphs \nproduced, file names based name code chunk \nproduced .","code":"\n```{r load_data}\nlibrary(\"readr\")\ngapminder \nThat is, you place a chunk of R code between ```{r chunk_name}\nand ```. You should give each chunk\na unique name, as they will help you to fix errors and, if any graphs are\nproduced, the file names are based on the name of the code chunk that\nproduced them.\n"},{"path":"data-analysis-reports.html","id":"how-r-markdown-gets-compiled","chapter":"11 Data analysis reports","heading":"11.6 How R Markdown gets compiled","text":"press “Knit” button knitr process R Markdown file create plain Markdown document (along set figure files needed).specified output document html file, Markdown file (figure documents) converted rendered html file using tool pandoc.Different output document types require different tool conversion. discused .","code":""},{"path":"data-analysis-reports.html","id":"chunk-options","chapter":"11 Data analysis reports","heading":"11.7 Chunk options","text":"saw , code chunks important part using R Markdown. now explore options controlling show document.Firstly need name code chunk name. default code chunks blank. ie:recomended use descriptive name ’load_data’ ‘read_libraries’. help break code chunks ensure chunk unique name.can control code resulting outputs shown final output changing code chunk options follow title. example:many different options can adjust. details can found R Markdown cheatsheet .ones need know first :cache: TRUE/FALSE. want output chunk saved dont run next time?eval: want code evaluated?echo: want print code?include: want include code output document?warning=FALSE message=FALSE : want hide warnings messages?fig.height fig.width : want set figures sizes (inches)?Tips: Finding help chunk options\ncan review R chunk options navigating \n“R Markdown Cheat Sheet” “Cheatsheets” section\n“Help” field toolbar top RStudio.Lets create code chunk. Firstly add name addup set eval parameter TRUE.knit document can see code result:dont want code appear output can use echo parameters.knit document now show result hide code.","code":"\n```{r}\n```\n\n```{r load_libraries}\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n```\n\n```{r load_libraries, eval = FALSE, echo = TRUE}\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n```\n\n```{r addup, eval = TRUE}\n1 + 1\n```\n\n1 + 1 [1] 2\n```{r addup, eval = TRUE, echo = FALSE}\n1 + 1\n```\n[1] 2"},{"path":"data-analysis-reports.html","id":"global-options","chapter":"11 Data analysis reports","heading":"11.7.1 Global options","text":"Often particular options ’ll want use\nrepeatedly; , can set global chunk options, like :","code":"\n```{r global_options, echo=FALSE}\nknitr::opts_chunk$set(fig.path=\"Figs/\", \n                      message=FALSE, \n                      warning=FALSE,\n                      echo=FALSE, \n                      results=\"hide\", \n                      fig.width=11)\n```\n"},{"path":"data-analysis-reports.html","id":"formatting-figures","chapter":"11 Data analysis reports","heading":"11.7.2 Formatting figures","text":"can use paramaters control location size plots using fig.height,fig.width\nfig.align. can also use fig.cap add title.can use gapminder dataset ggplot2package create format plot within R Markdown.\nFigure 11.1: nice descriptive title\nGenerate plot using gapminder dataset ggplot2 package. Use chunk options control size alignment figure.\n(#fig:pretty_plot)Pretty Plot\n","code":"\n```{r pretty_plot, eval = TRUE, echo = FALSE, fig.cap = \"A nice descriptive title\"}\n\nlibrary(\"readr\")\nlibrary(\"ggplot2\")\n\ngapminder \n\n\nFigure 11.1: A nice descriptive title\n\n\n\nChallenge 4\nGenerate a plot using the gapminder dataset and ggplot2 package. Use the chunk options to control the size and alignment of the figure.\n\nSolution to Challenge 4\n\n```{r pretty_plot, eval = TRUE, echo = FALSE, fig.cap= \"Pretty Plot\", fig.width = 5, fig.height = 5, fig.align = 'centre'}\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\ngeom_point()\n```\n\n\n\n(#fig:pretty_plot)Pretty Plot\n\n\n\n\n\n```{r pretty_plot, eval = TRUE, echo = FALSE, fig.cap= \"Pretty Plot\", fig.width = 5, fig.height = 5, fig.align = 'centre'}\nggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +\ngeom_point()\n```\n"},{"path":"data-analysis-reports.html","id":"inline-r-code","chapter":"11 Data analysis reports","heading":"11.8 Inline R code","text":"make document reproducible, can also use r populate values within sentence. ensure values automatically updated. can use `r ` designate -line code.\nexample: `r round( value, 2)`. code \nexecuted replaced evaluated value result.example:\n`r round(3.141593, 2)` show \n3.14This useful incorporating data calculations directly sentence: ratio circle’s circumference diameter `r round(3.141593, 2) `.appear :ratio circle's circumference diameter 3.14We can also calculations fly within inline code. example can calculate number instructors populate sentence. Firstly lets use length() determine number instructors:` r length(c(“Andy”, “Gen”, “Sam”, “Steph”))` run R console get 4.Now can add -line code using `r ` : course ` r length(c(“Andy”, “Gen”, “Sam”, “Steph”))` instructors rendered fomat look likethis course 4 instructorsTry bit -line R code using simple addition eg: 2+2.’s inline code determine 2 + 2 = 4.","code":""},{"path":"data-analysis-reports.html","id":"other-outputs-word-pdf-and-more","chapter":"11 Data analysis reports","heading":"11.9 Other outputs: Word, PDF and more…","text":"can convert R Markdown PDF Word document. Click \nlittle triangle next “Knit” button get drop-\nmenu.Alternatively can change YAML:","code":"---\ntitle: \"Exploring R Markdown\"\noutput: html_document\n------\ntitle: \"Exploring R Markdown\"\noutput: word_document\n------\ntitle: \"Exploring R Markdown\"\noutput: pdf_document\n---"},{"path":"data-analysis-reports.html","id":"a-note-about-rmd-outputs","chapter":"11 Data analysis reports","heading":"11.9.1 A note about Rmd outputs","text":"can easy get caught document looks. highly recommended render html document avoiding compiling PDF word really need . also recommended author rmarkdown knitr, Yihui Xie. means can spend time working generating content, trying get figures line correctly wrestling LaTex libraries.Markdown documents can compiled PDF, however likely require additional\nsoftware called LaTex. software can tricky install reccommended usetinytex alternative. R package lightweight\nversion LaTex designed r users. can install using following commands:lots information help available - see tinytex FQA page","code":"\ntinytex::install_tinytex()"},{"path":"data-analysis-reports.html","id":"resources","chapter":"11 Data analysis reports","heading":"11.10 Resources","text":"Knitr knutshell tutorialDynamic Documents R knitr (book)R Markdown documentationR Markdown cheat sheetGetting started R MarkdownR Markdown: Definitive Guide (book Rstudio team)Reproducible ReportingThe Ecosystem R MarkdownIntroducing Bookdown","code":""},{"path":"applications-of-r-markdown.html","id":"applications-of-r-markdown","chapter":"12 Applications of R Markdown","heading":"12 Applications of R Markdown","text":"Now ’ve learned basics R R Markdown, ’re going tie \nthings together regression Gapminder data displaying \nresults nicely formatted document.Working new R Markdown document (File -> New File -> R Markdown Document),\ncan load libraries going use, load data \ncode chunk:now, just going use data Canada, let’s insert code\nchunk filter data just Canada:want regression investigating relationship life\nexpectancy per-capita GDP Canada.can start inserting another code chunk quick visualization \ndata. can insert regression line points, doesn’t give us\nregression coefficients, significance, etc. need really evaluate\nrelationship.use lm() function perform General Linear Model (GLM), \nregression one form. specified new syntax, “formula” syntax:case, can put new code chunk fit model:summary() function gives us high level information regression\nmodel: coefficient estimates, R-squared, p-value.point using ggplot2 plotting, also \nbuilt-plot() function. use function model, gives us\nbasic diagnostic plots:lm objects ungainly - fine look inspect \nimportant parts model, difficult extract pieces \nwant use later - regression coefficients P values.another package can use, called broom, used tidy\nmodel results format familiar : data.frame. broom works\nmany different types models, today going use lm.first need install package:add chunk loads package, calls commonly-used\nfunctions broom:glance gives us model-level summary. r-squared adjusted r-squared,\nF statistic, P value, etc.tidy gives us information term regression - \ncase just intercept estimated effect per-capita GDP life expectancy.augment gives us estimated values response variable predicted\nmodel.Now data frame, can use easily. Let’s plot \nregression line onto plot:, using data frame containing predicted values, can calculate\n95% confidence limits, plot well:compare plot auto-generated line added beginning \nlesson (using geom_smooth()), see .can also pull model terms report “reproducibly”:plot:text:document can type:helps reduce typos, copy-paste errors, ensures data change,\nresults.Create copy report Canada, country choice.statement another country choosing.Remove add chunks, change chunk options show figures\nresults rendered report looks like report submit.","code":"\n```{r load}\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\ngapminder \nFor now, we are just going to use the data for Canada, so let’s insert a code\nchunk to filter our data to just Canada:\n\n```{r filter-can}\ncanada \nWe want to do a regression investigating the relationship between life\nexpectancy and per-capita GDP in Canada.\nWe can start by inserting another code chunk to do a quick visualization of the\ndata. We can insert the regression line on the points, but this doesn’t give us\nthe regression coefficients, significance, etc. that we need to really evaluate\nthe relationship.\n\n```{r plot-1}\nggplot(canada, aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n```\n\nWe use the lm() function to perform a General Linear Model (GLM), of which\na regression is one form. It is specified by a new syntax, a “formula” syntax:\n\nlm(response ~ predictor(s), data = data, ...)\nSo in our case, we can put in a new code chunk to fit the model:\n\n```{r model}\ncanada_lm \nThe summary() function gives us the high level information from our regression\nmodel: The coefficient estimates, the R-squared, and the p-value.\nTo this point we have been using ggplot2 for plotting, but there is also a\nbuilt-in plot() function. If we use that function on a model, it gives us\nsome basic diagnostic plots:\n\n```{r diagnostics}\nplot(canada_lm)\n```\n\nBut these lm objects are ungainly - they are fine to look at to inspect the\nimportant parts of our model, but difficult to extract those pieces that we\nwant to use later - such as regression coefficients and P values.\nThere is another package we can use, called broom, that is used to tidy\nmodel results into a format we are familiar with: a data.frame. broom works\nwith many different types of models, today we are going to use it on our lm.\nYou will first need to install the package:\n\ninstall.packages(\"broom\")\nThen add a chunk that loads the package, and calls the most commonly-used\nfunctions in broom:\n\n```{r broom}\nlibrary(broom)\nmodel_summary \n\n```{r filter-can}\ncanada \nWe want to do a regression investigating the relationship between life\nexpectancy and per-capita GDP in Canada.\nWe can start by inserting another code chunk to do a quick visualization of the\ndata. We can insert the regression line on the points, but this doesn’t give us\nthe regression coefficients, significance, etc. that we need to really evaluate\nthe relationship.\n\n```{r plot-1}\nggplot(canada, aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n```\n\nWe use the lm() function to perform a General Linear Model (GLM), of which\na regression is one form. It is specified by a new syntax, a “formula” syntax:\n\nlm(response ~ predictor(s), data = data, ...)\nSo in our case, we can put in a new code chunk to fit the model:\n\n```{r model}\ncanada_lm \nThe summary() function gives us the high level information from our regression\nmodel: The coefficient estimates, the R-squared, and the p-value.\nTo this point we have been using ggplot2 for plotting, but there is also a\nbuilt-in plot() function. If we use that function on a model, it gives us\nsome basic diagnostic plots:\n\n```{r diagnostics}\nplot(canada_lm)\n```\n\nBut these lm objects are ungainly - they are fine to look at to inspect the\nimportant parts of our model, but difficult to extract those pieces that we\nwant to use later - such as regression coefficients and P values.\nThere is another package we can use, called broom, that is used to tidy\nmodel results into a format we are familiar with: a data.frame. broom works\nwith many different types of models, today we are going to use it on our lm.\nYou will first need to install the package:\n\ninstall.packages(\"broom\")\nThen add a chunk that loads the package, and calls the most commonly-used\nfunctions in broom:\n\n```{r broom}\nlibrary(broom)\nmodel_summary \n\n```{r plot-1}\nggplot(canada, aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n```\n\nlm(response ~ predictor(s), data = data, ...)\n```{r model}\ncanada_lm \nThe summary() function gives us the high level information from our regression\nmodel: The coefficient estimates, the R-squared, and the p-value.\nTo this point we have been using ggplot2 for plotting, but there is also a\nbuilt-in plot() function. If we use that function on a model, it gives us\nsome basic diagnostic plots:\n\n```{r diagnostics}\nplot(canada_lm)\n```\n\nBut these lm objects are ungainly - they are fine to look at to inspect the\nimportant parts of our model, but difficult to extract those pieces that we\nwant to use later - such as regression coefficients and P values.\nThere is another package we can use, called broom, that is used to tidy\nmodel results into a format we are familiar with: a data.frame. broom works\nwith many different types of models, today we are going to use it on our lm.\nYou will first need to install the package:\n\ninstall.packages(\"broom\")\nThen add a chunk that loads the package, and calls the most commonly-used\nfunctions in broom:\n\n```{r broom}\nlibrary(broom)\nmodel_summary \n\n```{r diagnostics}\nplot(canada_lm)\n```\n\ninstall.packages(\"broom\")\n```{r broom}\nlibrary(broom)\nmodel_summary \n\n```{r plot-lm}\nggplot() + \n  geom_point(data = canada, aes(x = gdpPercap, y = lifeExp)) + \n  geom_line(data = model_predict, aes(x = gdpPercap, y = .fitted))\n```\n\n```{r plot-ci, echo=FALSE}\nmodel_predict % \n  mutate(lower_ci = .fitted - 1.96 * .se.fit, \n         upper_ci = .fitted + 1.96 * .se.fit)\n\nggplot() + \n  geom_ribbon(data = model_predict, aes(x = gdpPercap, ymin = lower_ci, ymax = upper_ci), alpha = 0.2) + \n  geom_point(data = canada, aes(x = gdpPercap, y = lifeExp)) + \n  geom_line(data = model_predict, aes(x = gdpPercap, y = .fitted))\n```\n\n```{r model-stats, echo=FALSE}\nr2  0.05\")\n\nggplot() + \n  geom_ribbon(data = model_predict, aes(x = gdpPercap, ymin = lower_ci, ymax = upper_ci), alpha = 0.2) + \n  geom_point(data = canada, aes(x = gdpPercap, y = lifeExp)) + \n  geom_line(data = model_predict, aes(x = gdpPercap, y = .fitted)) + \n  geom_text(aes(x = 72, y = 30000), label = paste0(\"R^2 = \", r2, \"; \", sig_0.05))\n```\n\n```{r lifeExp-stats, echo=FALSE}\nlife_exp \nThen in our document we can type:\nThe predicted effect of per-capita GDP on life expectancy is `r life_exp_estimate` \n(SE: `r life_exp_se`), meaning that for every dollar increase in per-capita GDP\nwe live longer by approximately `r life_exp_esimate` years.\nThis helps reduce typos, copy-paste errors, and ensures that if our data change,\nso do our results.\n\nChallenge 1\nCreate a copy of your report for Canada, and do it for the country of your choice.\n\nSolution to Challenge 1\nAll you really need to do is change\n\"Canada\"\nin your\nfilter\nstatement to another country of your choosing.\n\n\n\nChallenge 2\nRemove or add chunks, and change the chunk options to only show the figures\nand results so the rendered report looks like a report you would submit.\n\nSolution to Challenge 2\nPossible chunk options to change:\nresults='hide'\necho=FALSE\nmessage=FALSE\ninclude=FALSE\n\n\n\nThe predicted effect of per-capita GDP on life expectancy is `r life_exp_estimate` \n(SE: `r life_exp_se`), meaning that for every dollar increase in per-capita GDP\nwe live longer by approximately `r life_exp_esimate` years.\"Canada\"filterresults='hide'echo=FALSEmessage=FALSEinclude=FALSE"},{"path":"seeking-help-from-others-with-reprex.html","id":"seeking-help-from-others-with-reprex","chapter":"13 Seeking Help from Others with reprex","heading":"13 Seeking Help from Others with reprex","text":"’re trouble using function package, getting syntax correct, 9 times 10 answers seeking already asked answered -line:RStudio CommunityStack Overflow. can search using [r] tag.GoogleIf can’t find answer -line, -line forums seek help bcgov R community:bcgov Yammer channels (e.g. R, Data Science CoP)","code":""},{"path":"seeking-help-from-others-with-reprex.html","id":"help-people-help-you---reprex","chapter":"13 Seeking Help from Others with reprex","heading":"13.1 Help People Help You - reprex","text":"starting conversation code, things included make conversation efficient pleasant everyone:sample data (preferably provided code)code (comments, white-space, indents == make easy read)information computing environment, like operating system, version R, packages loadedreprex: R package help prepare reproducible example — reprex — posting GitHub issues, StackOverflow, RocketChat snippets, email .read error message helpful, used ?ggplot2, looked -line still find answer. Maybe someone bcgovR community knows?need invest bit time making buggy code shareable – easier someone run code, easier – likely faster – someone might able provide help.data shareable (e.g. available B.C. Data Catalogue appropriate licence, publicly available) can use dput():dput() dump data ’re working format can\ncopy pasted anyone else R session.data shareable, can use built data re-create issue:code ready sharing, select code use reprex_selection() clickable RStudio Addin Reprex selection button copy formatted code clipboard sharing -line (demonstrated).Sometimes useful share information computing environment well:sessionInfo() print current version R, well packages \nloaded. can useful help reproduce debug\nissue.","code":"\n# install.packages(\"reprex\")\n\n# load libraries we need\nlibrary(reprex)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# read in data\ncats <- read_csv(file = \"data/feline-data.csv\")\n\n# munge data and make bar plot\ncats %>% \n  select(coat, weight) %>% \n  ggplot(aes(x = coat, y = weight)) +  \n  geom_col()\n# error in syntax - this does not work\ncats %>% \n  select(coat, weight) %>% \n  ggplot(aes(x = coat, y = weight)) %>%   \n  geom_col()Error in `geom_col()`:\n! `mapping` must be created by `aes()`\nℹ Did you use `%>%` or `|>` instead of `+`?\n# use dput to make data set with code\ndput(cats)structure(list(coat = c(\"calico\", \"black\", \"tabby\"), weight = c(2.1, \n5, 3.2), likes_string = c(1, 0, 1)), row.names = c(NA, -3L), spec = structure(list(\n    cols = list(coat = structure(list(), class = c(\"collector_character\", \n    \"collector\")), weight = structure(list(), class = c(\"collector_double\", \n    \"collector\")), likes_string = structure(list(), class = c(\"collector_double\", \n    \"collector\"))), default = structure(list(), class = c(\"collector_guess\", \n    \"collector\")), delim = \",\"), class = \"col_spec\"), problems = <pointer: 0x600000c285e0>, class = c(\"spec_tbl_df\", \n\"tbl_df\", \"tbl\", \"data.frame\"))\ncats <- structure(list(coat = c(\"calico\", \"black\", \"tabby\"), weight = c(2.1, \n5, 3.2), likes_string = c(1, 0, 1)), class = c(\"spec_tbl_df\", \n\"tbl_df\", \"tbl\", \"data.frame\"), row.names = c(NA, -3L), spec = structure(list(\n    cols = list(coat = structure(list(), class = c(\"collector_character\", \n    \"collector\")), weight = structure(list(), class = c(\"collector_double\", \n    \"collector\")), likes_string = structure(list(), class = c(\"collector_double\", \n    \"collector\"))), default = structure(list(), class = c(\"collector_guess\", \n    \"collector\")), skip = 1), class = \"col_spec\"))\n\n# error in syntax - this does not work\ncats %>% \n  select(coat, weight) %>% \n  ggplot(aes(x = coat, y = weight)) %>%  \n  geom_col()Error in `geom_col()`:\n! `mapping` must be created by `aes()`\nℹ Did you use `%>%` or `|>` instead of `+`?\n# ?datasets # built in datasets\n# ?starwars # ships with dplyr\n\n# View(starwars)\n\n# error in syntax - this does not work\nstarwars %>% \n  select(name, height) %>% \n  ggplot(aes(x = name, y = height)) %>%  \n  geom_col()Error in `geom_col()`:\n! `mapping` must be created by `aes()`\nℹ Did you use `%>%` or `|>` instead of `+`?\nsessionInfo()R version 4.2.2 (2022-10-31)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.4.0 dplyr_1.0.10  readr_2.1.3   reprex_2.0.2  knitr_1.41   \n\nloaded via a namespace (and not attached):\n [1] highr_0.10       bslib_0.4.2      compiler_4.2.2   pillar_1.8.1    \n [5] jquerylib_0.1.4  tools_4.2.2      bit_4.0.5        digest_0.6.31   \n [9] downlit_0.4.2    gtable_0.3.1     jsonlite_1.8.4   evaluate_0.20   \n[13] memoise_2.0.1    lifecycle_1.0.3  tibble_3.1.8     pkgconfig_2.0.3 \n[17] rlang_1.0.6      DBI_1.1.3        cli_3.6.0        parallel_4.2.2  \n[21] yaml_2.3.6       xfun_0.36        fastmap_1.1.0    withr_2.5.0     \n[25] stringr_1.5.0    xml2_1.3.3       generics_0.1.3   fs_1.5.2        \n[29] sass_0.4.4       vctrs_0.5.1      hms_1.1.2        bit64_4.0.5     \n[33] grid_4.2.2       tidyselect_1.2.0 glue_1.6.2       R6_2.5.1        \n[37] fansi_1.0.3      vroom_1.6.0      rmarkdown_2.19   bookdown_0.32   \n[41] farver_2.1.1     tzdb_0.3.0       magrittr_2.0.3   scales_1.2.1    \n[45] htmltools_0.5.4  ellipsis_0.3.2   assertthat_0.2.1 colorspace_2.0-3\n[49] labeling_0.4.2   utf8_1.2.2       stringi_1.7.12   munsell_0.5.0   \n[53] cachem_1.0.6     crayon_1.5.2    "},{"path":"seeking-help-from-others-with-reprex.html","id":"other-helpful-resources","chapter":"13 Seeking Help from Others with reprex","heading":"13.2 Other Helpful Resources","text":"RStudio cheat sheetsQuick RCookbook R","code":""}]
